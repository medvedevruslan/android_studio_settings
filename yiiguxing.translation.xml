<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2023" />
    <option name="newTranslationDialogX" value="599" />
    <option name="newTranslationDialogY" value="761" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Caused by: java.lang.IllegalStateException: Can't access the Fragment View's LifecycleOwner when getView() is null i.e., before onCreateView() or after onDestroyView()" />
      <item value="ccess the Fragment View's LifecycleOwner when getView() is null i.e., before onCreateView() or after onDestroyView()" />
      <item value="is Valid" />
      <item value="Receive callbacks to a new OnBackPressedCallback when the given LifecycleOwner is at least started. This will automatically call addCallback(OnBackPressedCallback) and remove the callback as the lifecycle state changes. As a corollary, if your lifecycle is already at least started, calling this method will result in an immediate call to addCallback(OnBackPressedCallback). When the LifecycleOwner is destroyed, it will automatically be removed from the list of callbacks. The only time you would need to manually call OnBackPressedCallback.remove() is if you'd like to remove the callback prior to destruction of the associated lifecycle. If the Lifecycle is already destroyed when this method is called, the callback will not be added. Params: owner – The LifecycleOwner which controls when the callback should be invoked onBackPressedCallback – The callback to add See Also: onBackPressed()" />
      <item value="This is the class for text whose content and markup can both be changed." />
      <item value="Spannable String Builder" />
      <item value="A problem occurred configuring project ':domain'. &gt; 'kotlin-android' plugin requires one of the Android Gradle plugins. Please apply one of the following plugins to ':domain' project:" />
      <item value="Add Context instance to Koin container Params: androidContext - Context" />
      <item value="Template Fragment" />
      <item value="get Power Icon To Text" />
      <item value="get Text With Power Icon" />
      <item value="shared Pref User Storage" />
      <item value="current Toast" />
      <item value="hide" />
      <item value="enable debug mode, it's disabled by default" />
      <item value="it's 30s by default, making it 5s for testing --" />
      <item value="never For Location" />
      <item value="required" />
      <item value="Retrieve the {@link OnBackPressedDispatcher} that will be triggered when {@link onBackPressed()} is called. @return The {@link OnBackPressedDispatcher} associated with this ComponentActivity." />
      <item value="Retrieve the {@link OnBackPressedDispatcher} that will be triggered when {@link onBackPressed()} is called. @return The {@link OnBackPressedDispatcher} associated with this ComponentActivity" />
      <item value="on Back Pressed Dispatcher" />
      <item value="Not Paired" />
      <item value="Laments" />
      <item value="Sets whether this dialog is canceled when touched outside the window's bounds. If setting to true, the dialog is set to be cancelable if not already set." />
      <item value="set Canceled On Touch Outside" />
      <item value="Dialog Modes" />
      <item value="handle On Back Pressed" />
      <item value="Preferences" />
      <item value="Preferences Methods Fragment" />
      <item value="scale Type" />
      <item value="process Stream" />
      <item value="resolve" />
      <item value="Response Error" />
      <item value="handle Result" />
      <item value="Nothing has no instances. You can use Nothing to represent &quot;a value that never exists&quot;: for example, if a function has the return type of Nothing, it means that it never returns (always throws an exception)." />
      <item value="Returns a string representation of the object." />
      <item value="ndicates whether some other object is &quot;equal to&quot; this one. Implementations must fulfil the following requirements: Reflexive: for any non-null value x, x.equals(x) should return true. Symmetric: for any non-null values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. Transitive: for any non-null values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. Consistent: for any non-null values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. Never equal to null: for any non-null value x, x.equals(null) should return fals" />
      <item value="The root of the Kotlin class hierarchy. Every Kotlin class has Any as a superclass." />
      <item value="Receiver's interface to Channel." />
      <item value="state" />
      <item value="state Block" />
      <item value="Failure" />
      <item value="end region" />
      <item value="endregion" />
      <item value="By overriding invoke, we allow use cases to be called as &quot;invoking&quot;" />
      <item value="invoke" />
      <item value="region" />
      <item value="region Functions" />
      <item value="Get person from persistence and send it, synchronous" />
      <item value="If a list is already being displayed, a diff will be computed on a background thread, which will dispatch Adapter.notifyItem events on the main thread." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="878" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="878" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1650284580347" />
  </component>
</application>