<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="682" />
    <option name="newTranslationDialogWidth" value="1989" />
    <option name="newTranslationDialogX" value="5073" />
    <option name="newTranslationDialogY" value="1243" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="on Response Upload Measure Data" />
      <item value="on Response Device Info" />
      <item value="old Com" />
      <item value="all Received Command" />
      <item value="User-defined message code so that the recipient can identify what this message is about. Each Handler has its own name-space for message codes, so you do not need to worry about yours conflicting with other handlers." />
      <item value="reply Mac Address Or Time" />
      <item value="receive Error" />
      <item value="substring" />
      <item value="Returns the element at the specified position in this list. Params: index – index of the element to return Returns: the element at the specified position in this list Throws: IndexOutOfBoundsException – if the index is out of range (index &lt; 0 || index &gt;= size())" />
      <item value="成功寫出" />
      <item value="Write characteristic without requiring a response by the remote device" />
      <item value="WRITE_TYPE_NO_RESPONSE or" />
      <item value="Set the write type for this characteristic Setting the write type of a characteristic determines how the BluetoothGatt.writeCharacteristic function write this characteristic. Params: writeType – The write type to for this characteristic. Can be one of: WRITE_TYPE_DEFAULT, WRITE_TYPE_NO_RESPONSE or WRITE_TYPE_SIGNED." />
      <item value="access modifiers changed from: protected" />
      <item value="split Task" />
      <item value="parse Task Between Measure And Send Request" />
      <item value="parse Task Beyond Measure And Send Request" />
      <item value="UPLOAD MEASURE DATA" />
      <item value="SEND REQUEST" />
      <item value="ambient Temperature" />
      <item value="the number of values buffered in addition to replay." />
      <item value="Drop the oldest value in the buffer on overflow, add the new value to the buffer, do not suspend." />
      <item value="Suspend on buffer overflow." />
      <item value="Creates a flow that produces values from the specified vararg-arguments." />
      <item value="Implementation note: this is just an &quot;optimized&quot; overload of flowOf(vararg) which significantly reduces the footprint of widespread single-value flows." />
      <item value="Creates a flow that produces the given value." />
      <item value="allocated" />
      <item value="private val dataBase: DataBase = DataBase, private val refreshIntervalMs: Long = 1000" />
      <item value="source" />
      <item value="Network Bound Repository" />
      <item value="remote Posts" />
      <item value="The terminal operator that returns the first element emitted by the flow and then cancels flow's collection. Throws NoSuchElementException if the flow was empty" />
      <item value="fold" />
      <item value="predicate" />
      <item value="The terminal operator that returns the first element emitted by the flow and then cancels flow's collection. Throws NoSuchElementException if the flow was empty." />
      <item value="Emit Database content first" />
      <item value="save Remote Data" />
      <item value="@MainThread public void onBackPressed() Trigger a call to the currently added callbacks in reverse order in which they were added. Only if the most recently added callback is not enabled will any previously added callback be called. If hasEnabledCallbacks() is false when this method is called, the fallback Runnable set by the constructor will be triggered. androidx.activity.OnBackPressedDispatcher Gradle: androidx.activity:activity:1.5.1@aar (classes.jar)" />
      <item value="Create an ActivityOptions to transition between Activities using cross-Activity scene animations. This method carries the position of one shared element to the started Activity. The position of sharedElement will be used as the epicenter for the exit Transition. The position of the shared element in the launched Activity will be the epicenter of its entering Transition." />
      <item value="Observe network changes i.e. Internet Connectivity" />
      <item value="Notify the widget that refresh state has changed. Do not call this when refresh is triggered by a swipe gesture. @param refreshing Whether or not the view should show refresh progress." />
      <item value="bind" />
      <item value="along" />
      <item value="Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. When the exit Transition completes, finish() is called. If no entry Transition was used, finish() is called immediately and the Activity exit Transition is run. On Android 4.4 or lower, this method only finishes the Activity with no special exit transition." />
      <item value="Set whether home should be displayed as an &quot;up&quot; affordance. Set this to true if selecting &quot;home&quot; returns up by a single level in your UI rather than back to the top level or front page. To set several display options at once, see the setDisplayOptions methods. Params: showHomeAsUp – true to show the user that selecting home will return one level up rather than to the top level of the app. See Also: setDisplayOptions(int), setDisplayOptions(int, int)" />
      <item value="error: There is a problem with the query: [SQLITE_ERROR] SQL error or missing database (no such table: foodium_posts) public abstract void deleteAllPosts();" />
      <item value="This view is not constrained. It only has designtime positions, so it will jump to (0,0) at runtime unless you add the constraints" />
      <item value="instantiated:" />
      <item value="The surrounding layout (@layoutactivity_post_details) did not actually include this layout. Remove tools:showIn=... from the root tag. Tip: Try to refresh the layout." />
      <item value="Horizontal bias" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1" />
        <entry key="ENGLISH" value="1905" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1905" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="SUNDANESE" value="1" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1669623435467" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1674549427372" />
  </component>
  <component name="Translation.States">
    <histories>
      <item value="invoke" />
      <item value="uuid Insecure" />
      <item value="Selector for {@link stopForeground(int)}: if set, the notification previously supplied to {@link startForeground} will be detached from the service's lifecycle. The notification will remain shown even after the service is stopped and destroyed." />
      <item value="regular State" />
      <item value="Sets the callback that will be called if a key is dispatched to the dialog." />
      <item value="Key code constant: Back key." />
      <item value="{@link getAction} value: the key has been pressed down." />
      <item value="dispatched" />
      <item value="response" />
      <item value="Wrapper" />
      <item value="Result Wrapper" />
      <item value="current View State" />
      <item value="Success Recover" />
      <item value="Success Sign In Server" />
      <item value="Launches and runs the given block when the [Lifecycle] controlling this [LifecycleCoroutineScope] is at least in [Lifecycle.State.STARTED] state. The returned [Job] will be cancelled when the [Lifecycle] is destroyed. Caution: This API is not recommended to use as it can lead to wasted resources in some cases. Please, use the [Lifecycle.repeatOnLifecycle] API instead. This API will be removed in a future release." />
      <item value="current Checkup Dao" />
      <item value="Caused by: org.koin.core.error.NoBeanDefFoundException: |- No definition found for class:'com.example.clean_pre_trip_control.domain.usecases.results.SendAllTestResultsToServerUseCase'. Check your definitions!" />
      <item value="p_control.presentation.ui.ble.pressure.PressureService has leaked IntentReceiver com.example.clean_pre_trip_control.presentation.ui.ble.BleServicebluetoothEnableListener1@63fb866 that was originally registered here. Are you missing a call to unregisterReceiver()? android.app.IntentReceiverLeaked: Service com.example.clean_pre_trip_control.presentation.ui.ble.pressure.PressureService has leaked IntentReceiver com.example.clean_pre_trip_control.presentation.ui.ble.BleServicebluetoothEnableListener1@63fb866 that was originally registered here. Are you missing a call to unregisterReceiver()?" />
      <item value="ThermometerService has leaked IntentReceiver com.example.clean_pre_trip_control.presentation.ui.ble.BleServicebluetoothEnableListener1@b901c9e that was originally registered here. Are you missing a call to unregisterReceiver()? android.app.IntentReceiverLeaked: Service com.example.clean_pre_trip_control.presentation.ui.ble.thermometer.ThermometerService has leaked IntentReceiver com.example.clean_pre_trip_control.presentation.ui.ble.BleServicebluetoothEnableListener1@b901c9e that was originally registered here. Are you missing a call to unregisterReceiver()?" />
      <item value="qualifier" />
      <item value="definition" />
      <item value="org.koin.core.error.NoBeanDefFoundException: |- No definition found for class:'com.example.clean_pre_trip_control.domain.usecases.measurement.CheckTestFinalOnDbUseCaseImpl'. Check your definitions!" />
      <item value="No definition found for class:'com.example.clean_pre_trip_control.domain.usecases.measurement.CheckTestFinalOnDbUseCaseImpl'. Check your definitions!" />
      <item value="or later" />
      <item value="- Queue for values in BleCharacteristicInteractor.kt Handler replaced with Job;" />
      <item value="&quot;bluetoothGatt is already null" />
      <item value="This property can be accessed only after this Fragment is attached i.e., after Fragment.onAttach(), and access prior to that will result in IllegalArgumentException." />
      <item value="on Response" />
      <item value="Chain validation failed" />
      <item value="Service ru.kamaz.linear_pre_trip_control.template.bluetooth_le.BluetoothLEService has leaked IntentReceiver ru.kamaz.linear_pre_trip_control.template.bluetooth_le.BluetoothLEServicebroadcastReceiver1@5c5c9d2 that was originally registered here. Are you missing a call to unregisterReceiver()? android.app.IntentReceiverLeaked: Service ru.kamaz.linear_pre_trip_control.template.bluetooth_le.BluetoothLEService has leaked IntentReceiver ru.kamaz.linear_pre_trip_control.template.bluetooth_le.BluetoothLEServicebroadcastReceiver1@5c5c9d2 that was originally registered here. Are you missing a call to unregisterReceiver()?" />
      <item value="noinspection ExpiredTargetSdkVersion" />
      <item value="Laments" />
      <item value="COMPLAINT" />
      <item value="assembly List" />
      <item value=".FragmentInstantiationException: Unable to instantiate fragment com.example.cupcake.Sta rtFragment: make sure class name exists" />
      <item value="desired" />
      <item value="wrong" />
      <item value="Returns the number of elements in the array." />
      <item value="split Task" />
      <item value="could not find callback wrapper" />
      <item value="java.lang.ClassCastException: com.example.clean_pre_trip_control.domain.models.MeasurementValueTemperatureMeasurementValue cannot be cast to com.example.clean_pre_trip_control.domain.models.MeasurementValuePressureMeasurementValue" />
      <item value="Confirmation Dialog Fragment" />
      <item value="build" />
      <item value="pop Up To Inclusive" />
      <item value="Flag indicating that the created PendingIntent should be immutable. This means that the additional intent argument passed to the send methods to fill in unpopulated properties of this intent will be ignored. FLAG_IMMUTABLE only limits the ability to alter the semantics of the intent that is sent by send by the invoker of send. The creator of the PendingIntent can always update the PendingIntent itself via FLAG_UPDATE_CURRENT." />
      <item value="Supply a {@link PendingIntent} to send when the notification is clicked. If you do not supply an intent, you can now add PendingIntents to individual views to be launched when clicked by calling {@link RemoteViewssetOnClickPendingIntent RemoteViews.setOnClickPendingIntent(int,PendingIntent)}. Be sure to read {@link NotificationcontentIntent Notification.contentIntent} for how to correctly use this." />
      <item value="Unknown Failure" />
      <item value="Display the dialog, adding the fragment to the given FragmentManager. This is a convenience for explicitly creating a transaction, adding the fragment to it with the given tag, and committing it. This does not add the transaction to the fragment back stack. When the fragment is dismissed, a new transaction will be executed to remove it from the activity. Params: manager – The FragmentManager this fragment will be added to. tag – The tag for this fragment, as per FragmentTransaction.add." />
      <item value="Failure Ble" />
      <item value="new Instance" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="73" />
        <entry key="RUSSIAN" value="73" />
      </map>
    </option>
  </component>
</application>