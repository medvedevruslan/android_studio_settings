<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="2051" />
    <option name="newTranslationDialogX" value="4339" />
    <option name="newTranslationDialogY" value="982" />
    <histories>
      <item value="Supply the construction arguments for this fragment. The arguments supplied here will be retained across fragment destroy and creation. &lt;p&gt;This method cannot be called if the fragment is added to a FragmentManager and if {@link isStateSaved()} would return true.&lt;p&gt;" />
      <item value="Hitch Info Fragment" />
      <item value="Wheel" />
      <item value="Wheel Info Fragment" />
      <item value="on Click Speech" />
      <item value="Schedules a commit of this transaction. The commit does not happen immediately; it will be scheduled as work on the main thread to be done the next time that thread is ready. &lt;p class=&quot;note&quot;&gt;A transaction can only be committed with this method prior to its containing activity saving its state. If the commit is attempted after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored from its state. See {@link commitAllowingStateLoss()} for situations where it may be okay to lose the commit.&lt;p&gt; @return Returns the identifier of this transaction's back stack entry, if {@link addToBackStack(String)} had been called. Otherwise, returns a negative number." />
      <item value="Replace an existing fragment that was added to a container. This is essentially the same as calling {@link remove(Fragment)} for all currently added fragments that were added with the same containerViewId and then {@link add(int, Fragment, String)} with the same arguments given here. @param containerViewId Identifier of the container whose fragment(s) are to be replaced. @param fragment The new fragment to place in the container. @param tag Optional tag name for the fragment, to later retrieve the fragment with {@link FragmentManagerfindFragmentByTag(String) FragmentManager.findFragmentByTag(String)}. @return Returns the same FragmentTransaction instance." />
      <item value="Calls {@link replace(int, Fragment, String)} with a null tag." />
      <item value="tart a series of edit operations on the Fragments associated with this FragmentManager. &lt;p&gt;Note: A fragment transaction can only be createdcommitted prior to an activity saving its state. If you try to commit a transaction after {@link FragmentActivityonSaveInstanceState FragmentActivity.onSaveInstanceState()} (and prior to a following {@link FragmentActivityonStart FragmentActivity.onStart} or {@link FragmentActivityonResume FragmentActivity.onResume()}, you will get an error. This is because the framework takes care of saving your current fragments in the state, and if changes are made after the state is saved then they will be lost.&lt;p&gt;" />
      <item value="Return the FragmentManager for interacting with fragments associated with this activity." />
      <item value="Return the FragmentManager for interacting with fragments associated with this activity" />
      <item value="it used for visualizing items as buttons in section 'indicators settings'" />
      <item value="bind" />
      <item value="variation" />
      <item value="Return the arguments supplied when the fragment was instantiated, if any." />
      <item value="Return the arguments supplied when the fragment was instantiated." />
      <item value="Exception" />
      <item value="FAILURE: Build failed with an exception. What went wrong: Execution failed for task ':app:testDebugUnitTest'. &gt; No tests found for given includes: [ru.kamaz.smart_truck.history.HistoryEventsFragmentTest](filter.includeTestsMatching) Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. Get more help at https:help.gradle.org" />
      <item value="mismatch" />
      <item value="three Days Ago Calendar" />
      <item value="Padding added because of clipping of the bottom buttons" />
      <item value="Discarding envelope from cache: datauser0ru.kamaz.smart_truckcachesentry2bec94b3-98ed-4457-bc21-63266892e705.envelope" />
      <item value="Envelope flushed" />
      <item value="Creates a Transaction and returns the instance. Started transaction is set on the scope." />
      <item value="If you keep the line number information, uncomment this to hide the original source file name. -renamesourcefileattribute SourceFile" />
      <item value="it's 30s by default, making it 5s for testing" />
      <item value="&lt;!-- enable debug mode, it's disabled by default --&gt;" />
      <item value="Set a tinting option for the image. Assumes {@link PorterDuff.ModeSRC_ATOP} blending mode. @param color Color tint to apply. @attr ref android.R.styleableImageView_tint" />
      <item value="wipers Zero" />
      <item value="high" />
      <item value="Direction" />
      <item value="stroke" />
      <item value="solid" />
      <item value="clicker" />
      <item value="@return A handler associated with the thread running the View. This handler can be used to pump events in the UI events queue." />
      <item value=") did not return a View from onCreateView() or this was called before onCreateView()." />
      <item value="before" />
      <item value="java.lang.IllegalStateException: Fragment LightBottomFragment{8bdeed4} (fcdeaeb2-deeb-425b-878c-dbb8cf3053eb id=0x7f0a0240) did not return a View from onCreateView() or this was called before onCreateView()." />
      <item value="Get the root view for the fragment's layout (the one returned by {@link onCreateView}). @throws IllegalStateException if no view was returned by {@link onCreateView}. @see getView()" />
      <item value="Returns the ViewTreeObserver for this view's hierarchy. The view tree observer can be used to get notifications when global events, like layout, happen. The returned ViewTreeObserver observer is not guaranteed to remain valid for the lifetime of this View. If the caller of this method keeps a long-lived reference to ViewTreeObserver, it should always check for the return value of {@link ViewTreeObserverisAlive()}. @return The ViewTreeObserver for this view's hierarchy." />
      <item value="as" />
      <item value="Implement this method to handle touch screen motion events. &lt;p&gt; If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling {@link performClick()}. This will ensure consistent system behavior, including: &lt;ul&gt; &lt;li&gt;obeying click sound preferences &lt;li&gt;dispatching OnClickListener calls &lt;li&gt;handling {@link AccessibilityNodeInfoACTION_CLICK ACTION_CLICK} when accessibility features are enabled &lt;ul&gt; @param event The motion event. @return True if the event was handled, false otherwise." />
      <item value="def Style Attr" />
      <item value="torrent Windows Max" />
      <item value="Remove any pending posts of Runnable r that are in the message queue." />
      <item value="node" />
      <item value="translatable" />
      <item value="A resource failed to call close." />
      <item value="Rect" />
      <item value="Rounded" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="375" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="375" />
        <entry key="GALICIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1643004593799" />
  </component>
</application>