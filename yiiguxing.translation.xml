<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2031" />
    <option name="newTranslationDialogX" value="4544" />
    <option name="newTranslationDialogY" value="796" />
    <histories>
      <item value="event Network Error" />
      <item value="_event Network Error" />
      <item value="hide" />
      <item value="Dev Byte Network" />
      <item value="Returns a list containing the results of applying the given [transform] function to each element in the original collection." />
      <item value="Returns a list containing the results of applying the given transform function to each element in the original collection" />
      <item value="instances" />
      <item value="permit functional composition" />
      <item value="permit" />
      <item value="Transformation methods for {@link LiveData}. &lt;p&gt; These methods permit functional composition and delegation of {@link LiveData} instances. The transformations are calculated lazily, and will run only when the returned {@link LiveData} is observed. Lifecycle behavior is propagated from the input {@code source} {@link LiveData} to the returned one." />
      <item value="suspend" />
      <item value="REPLACE" />
      <item value="OnConflict strategy constant to replace the old data and continue the transaction. An Insert DAO method that returns the inserted rows ids will never return -1 since this strategy will always insert a row even if there is a conflict" />
      <item value="as Domain Model" />
      <item value="as Database Model" />
      <item value="launch Uri" />
      <item value="Event triggered for network error. This is private to avoid exposing a way to set this value to observers." />
      <item value="A playlist of videos that can be shown on the screen. Views should use this to get access to the data." />
      <item value="Convert Network results to database objects" />
      <item value="Videos represent a devbyte that can be played." />
      <item value="Truncate long text with a preference for word boundaries and without trailing punctuation." />
      <item value="smart Truncate" />
      <item value="Short description is used for displaying truncated descriptions in the UI" />
      <item value="description" />
      <item value="Dispatches update operations to the given Callback. &lt;p&gt; These updates are atomic such that the first update call affects every update call that comes after it (the same as RecyclerView)." />
      <item value="first" />
      <item value="Dispatches update operations to the given Callback. &lt;p&gt; These updates are atomic such that the first update call affects every update call that comes after it (the same as RecyclerView). @param updateCallback The callback to receive the update operations. @see dispatchUpdatesTo(RecyclerView.Adapter)" />
      <item value="This class holds the information about the result of a {@link DiffUtilcalculateDiff(Callback, boolean)} call." />
      <item value="correct animation." />
      <item value="you can return the particular field that changed in the item and your" />
      <item value="particular field that changed in the item and your" />
      <item value="this method is called to get a payload about the change." />
      <item value="Callback for calculating the diff between two non-null items in a list. Used by ListAdapter to calculate the minimum number of changes between and old list and a new list that's been passed to `submitList`." />
      <item value="are Contents The Same" />
      <item value="Set the listener to be notified when a refresh is triggered via the swipe gesture." />
      <item value="scroll Up Child" />
      <item value="page" />
      <item value="Creates a MutableLiveData with no value assigned to it." />
      <item value="resolve" />
      <item value="consume Each" />
      <item value="Performs the given [action] for each received element and [cancels][ReceiveChannel.cancel] the channel after the execution of the block. If you need to iterate over the channel without consuming it, a regular `for` loop should be used instead. The operation is _terminal_. This function [consumes][ReceiveChannel.consume] all elements of the original [ReceiveChannel" />
      <item value="process Stream" />
      <item value="Coroutine Scope" />
      <item value="Receive Channel" />
      <item value="receive Channel" />
      <item value="TBD" />
      <item value="API 'BaseVariant.getApplicationIdTextResource' is obsolete and has been replaced with 'VariantProperties.applicationId'." />
      <item value="API 'BaseVariant.getApplicationIdTextResource' is obsolete and has been replaced with 'VariantProperties.applicationId'. It will be removed in version 7.0 of the Android Gradle plugin. For more information, see TBD. To determine what is calling BaseVariant.getApplicationIdTextResource, use -Pandroid.debug.obsoleteApi=true on the command line to display more information." />
      <item value="reified" />
      <item value="on Load More" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="797" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="797" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="GREEK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1649051998588" />
  </component>
</application>