<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="1995" />
    <option name="newTranslationDialogX" value="5005" />
    <option name="newTranslationDialogY" value="1307" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Creates a LiveData that has values collected from the origin" />
      <item value="Returns a flow that contains first count elements. When count elements are consumed, the original flow is cancelled. Throws IllegalArgumentException if count is not positive." />
      <item value="switch Map" />
      <item value="Returns a LiveData mapped from this LiveData by applying transform to each value set on this LiveData." />
      <item value="Add the given LiveData as a source, similar to MediatorLiveData.addSource. Calling this method will remove any source that was yielded before via emitSource." />
      <item value="Starts to listen the given source LiveData, onChanged observer will be called when source value was changed. onChanged callback will be called only when this MediatorLiveData is active. If the given LiveData is already added as a source but with a different Observer, IllegalArgumentException will be thrown. Params: source – the LiveData to listen to onChanged – The observer that will receive the events Type parameters: &lt;S&gt; – The type of data hold by source LiveData" />
      <item value="Returns the index of the first occurrence of the specified element in the list, or -1 if the specified element is not contained in the list." />
      <item value="custom Sort Order" />
      <item value="Cache the first non-error result from an async computation passed as [block]." />
      <item value="Returns a LiveData mapped from the input this LiveData by applying transform to each value set on this. Note that when the backing LiveData is switched, no further values from the older LiveData will be set to the output LiveData. In this way, the method is analogous to io.reactivex.Observable.switchMap. transform will be executed on the main thread." />
      <item value="get Plants With Grow Zone" />
      <item value="A list of plants that updates based on the current filter." />
      <item value="[FlowCollector] is used as an intermediate or a terminal collector of the flow and represents an entity that accepts values emitted by the [Flow]." />
      <item value="Checkup" />
      <item value="set Final Test To Checkup In Db Use Case" />
      <item value="replace with checking if the test result has been saved" />
      <item value="Regular" />
      <item value="reified" />
      <item value="inject lazily given dependency for Android koincomponent" />
      <item value="Get Bluetooth State Flow Setter Use Case" />
      <item value="ACTION STATE CHANGED" />
      <item value="wait Delay" />
      <item value="Next Button Model" />
      <item value="receiver" />
      <item value="A simple callback that can receive from {@link LiveData}." />
      <item value="Calls the specified function [block] with the given [receiver] as its receiver and returns its result." />
      <item value="An object wrapper to make it observable." />
      <item value="The value to be wrapped as an observable." />
      <item value="Wraps the given object and creates an observable object" />
      <item value="instance" />
      <item value="Koin" />
      <item value="Get a Koin instance" />
      <item value="inject" />
      <item value="inject lazily given dependency for Android koincomponent @param qualifier - bean qualifier optional @param mode - LazyThreadSafetyMode @param parameters - injection" />
      <item value="nject lazily given dependency for Android koincomponent @param qualifier - bean qualifier optional @param mode - LazyThreadSafetyMode @param parameters - injection parameters" />
      <item value="change First Try Measure Ble" />
      <item value="String index out of range: 4" />
      <item value="Clears the content of this string builder making it empty and returns this instance." />
      <item value="reply Upload Measure Data" />
      <item value="ambient Temperature" />
      <item value="UPLOAD MEASURE DATA" />
      <item value="Returns a formatted string using the specified format string and arguments." />
      <item value="Uses the provided format as a format string and returns a string obtained by substituting the specified arguments, using the default locale." />
      <item value="CMD REPLY RESULT SUCCESS" />
      <item value="reply Mac Address Or Time" />
      <item value="Calculates the remainder of truncating division of this value by the other value. The result is either zero or has the same sign as the dividend and has the absolute value less than the absolute value of the divisor." />
      <item value="Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone. The value returned is between 0 and 59. Deprecated As of JDK version 1.1, replaced by Calendar.get(Calendar.MINUTE). Returns: the number of minutes past the hour represented by this date. See Also: Calendar" />
      <item value="Gets a calendar using the default time zone and locale. The Calendar returned is based on the current time in the default time zone with the default FORMAT locale. Returns: a Calendar." />
      <item value="Returns the current time in milliseconds. Note that while the unit of time of the return value is a millisecond, the granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds. See the description of the class Date for a discussion of slight discrepancies that may arise between &quot;computer time&quot; and coordinated universal time (UTC). Returns: the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC." />
      <item value="Returns a string obtained by concatenating this string with the string representation of the given other object" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="1403" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1403" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
        <entry key="SUNDANESE" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1659943840931" />
  </component>
</application>