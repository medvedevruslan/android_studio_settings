<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2005" />
    <option name="newTranslationDialogX" value="483" />
    <option name="newTranslationDialogY" value="1435" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Return true if Bluetooth LE(Always BLE On feature) is currently enabled and ready for use This returns true if current state is either STATE_ON or STATE_BLE_ON Returns: true if the local Bluetooth LE adapter is turned on" />
      <item value="Return true if Bluetooth is currently enabled and ready for use. Equivalent to: getBluetoothState() == STATE_ON Returns: true if the local adapter is turned on" />
      <item value="BIND AUTO CREATE" />
      <item value="destination" />
      <item value="Instantiatable" />
      <item value="If set to true, this service with be automatically stopped when the user remove a task rooted in an activity owned by the application. The default is false." />
      <item value="least Sig Bits" />
      <item value="most Sig Bits" />
      <item value="TODO: Consider calling ActivityCompatrequestPermissions here to request the missing permissions, and then overriding public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) to handle the case where the user grants the permission. See the documentation for ActivityCompatrequestPermissions for more details. return" />
      <item value="show" />
      <item value="launch Service" />
      <item value="Model State Ordinal" />
      <item value="Compaints" />
      <item value="hide" />
      <item value="has not been attached yet." />
      <item value="Get the root view for the fragment's layout (the one returned by onCreateView). Throws: IllegalStateException – if no view was returned by onCreateView. See Also: getView()" />
      <item value="Supply the construction arguments for this fragment. The arguments supplied here will be retained across fragment destroy and creation. This method cannot be called if the fragment is added to a FragmentManager and if isStateSaved() would return true." />
      <item value="Base interface that can be used for implementing property delegates of read-write properties. This is provided only for convenience; you don't have to extend this interface as long as your property delegate has methods with the same signatures." />
      <item value="Base interface that can be used for implementing property delegates of read-write properties. This is provided only for convenience; you don't have to extend this interface as long as your property delegate has methods with the same signatures. @param T the type of object which owns the delegated property. @param V the type of the property value." />
      <item value="Base interface that can be used for implementing property delegates of read-only properties. This is provided only for convenience; you don't have to extend this interface as long as your property delegate has methods with the same signatures. Params: T - the type of object which owns the delegated property. V - the type of the property value." />
      <item value="Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type MainDialogDto?" />
      <item value="Represents an array (specifically, a Java array when targeting the JVM platform). Array instances can be created using the arrayOf, arrayOfNulls and emptyArray standard library functions. See Kotlin language documentation for more information on arrays." />
      <item value="Calls the specified function block with this value as its argument and returns this value. For detailed usage information see the documentation for scope functions ." />
      <item value="declared" />
      <item value="Ref" />
      <item value="this Ref" />
      <item value="Base interface that can be used for implementing property delegates of read-write properties. This is provided only for convenience; you don't have to extend this interface as long as your property delegate has methods with the same signatures. Params: T - the type of object which owns the delegated property." />
      <item value="Read Write Property" />
      <item value="Get the root view for the fragment's layout (the one returned by onCreateView), if provided. Returns: The fragment's root view, or null if it has no layout." />
      <item value="java.lang.IllegalStateException: onGetLayoutInflater() cannot be executed until the Fragment is attached to the FragmentManager." />
      <item value="Returns the cached LayoutInflater used to inflate Views of this Fragment. If onGetLayoutInflater(Bundle) has not been called onGetLayoutInflater(Bundle) will be called with a null argument and that value will be cached. The cached LayoutInflater will be replaced immediately prior to onCreateView(LayoutInflater, ViewGroup, Bundle) and cleared immediately after onDetach(). Returns: The LayoutInflater used to inflate Views of this Fragment." />
      <item value="onGetLayoutInflater() cannot be executed until the Fragment is attached to the FragmentManager." />
      <item value="Display the dialog, adding the fragment to the given FragmentManager. This is a convenience for explicitly creating a transaction, adding the fragment to it with the given tag, and committing it. This does not add the transaction to the fragment back stack. When the fragment is dismissed, a new transaction will be executed to remove it from the activity. Params: manager – The FragmentManager this fragment will be added to. tag – The tag for this fragment, as per FragmentTransaction.add." />
      <item value="TIME TO ALL MEASURE TIMER" />
      <item value="TIMER TIME TO ALL MEASURE" />
      <item value="millis Future" />
      <item value="apply" />
      <item value="Display the dialog, adding the fragment to the given FragmentManager. This is a convenience for explicitly creating a transaction, adding the fragment to it with the given tag, and committing it. This does not add the transaction to the fragment back stack. When the fragment is dismissed, a new transaction will be executed to remove it from the activity. Params: manager – The FragmentManager this fragment will be added to. tag – The tag for this fragment, as per" />
      <item value="Type mismatch: inferred type is Bundle? but Bundle was expected" />
      <item value="Invocation failed Unexpected end of file from server" />
      <item value="Set custom binding" />
      <item value="disable" />
      <item value="disenable" />
      <item value="disenabled" />
      <item value="enabled" />
      <item value="dissenabled" />
      <item value="that accepts parameter type 'android.widget.Button" />
      <item value="If a binding adapter provides the setter, check that the adapter is annotated correctly and that the parameter type matches." />
      <item value="Cannot find a setter for &lt;com.google.android.material.textfield.TextInputLayout app:configEdtTxtContainer&gt; that accepts parameter type 'android.widget.Button'" />
      <item value="build Binding" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="1066" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1066" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1653887742684" />
  </component>
</application>