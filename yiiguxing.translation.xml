<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2047" />
    <option name="newTranslationDialogX" value="4494" />
    <option name="newTranslationDialogY" value="953" />
    <histories>
      <item value="hide" />
      <item value="extensions" />
      <item value="is Valid" />
      <item value="Setup Android Logger for Koin" />
      <item value="&gt; Could not get unknown property 'koin_version' for object of type org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler." />
      <item value="Required by: project :app" />
      <item value="reified" />
      <item value="remote" />
      <item value="Give a String qualifier" />
      <item value="get News Use Case" />
      <item value="GET NEWS USECASE" />
      <item value="invoke" />
      <item value="Response" />
      <item value="Photo Response" />
      <item value="Storage" />
      <item value="Currency Storage" />
      <item value="User Storage" />
      <item value="Avoid using context in viewmodels. Set an Event Listener and use it in fragment using liveData." />
      <item value="populate Data" />
      <item value="Bind" />
      <item value="on Bind View Holder" />
      <item value="bind" />
      <item value="Set a value value in the Binding class. &lt;p&gt; Typically, the developer will be able to call the subclass's set method directly. For example, if there is a variable &lt;code&gt;x&lt;code&gt; in the Binding, a &lt;code&gt;setX&lt;code&gt; method will be generated. However, there are times when the specific subclass of ViewDataBinding is unknown, so the generated method cannot be discovered without reflection. The setVariable call allows the values of variables to be set without reflection." />
      <item value="Food Items DTO" />
      <item value="View Holder" />
      <item value="bind Recycler View Adapter" />
      <item value="Unable to load class 'javax.xml.bind.JAXBException'." />
      <item value="here you can make an API call for populating. If you are doing API call then return observables and observe them in the fragments accordingly." />
      <item value="Flag indicating whether this window requests a translucent status bar. Corresponds to {@link android.view.WindowManager.LayoutParamsFLAG_TRANSLUCENT_STATUS}. --&gt;" />
      <item value="The NavigationView already has these same navigation items, so we only add navigation items to the menu here if there isn't a NavigationView" />
      <item value="ID does not reference a View inside this Activity" />
      <item value="Add an item for the settings fragment" />
      <item value="aused by: java.lang.IllegalArgumentException: navigation destination com.example.coursecurrencies:layoutactivity_main is not a direct child of this NavGraph" />
      <item value="primary" />
      <item value="Set a {@link android.widget.Toolbar Toolbar} to act as the {@link androidx.appcompat.app.ActionBar} for this Activity window. &lt;p&gt;When set to a non-null value the {@link getActionBar()} method will return an {@link androidx.appcompat.app.ActionBar} object that can be used to control the given toolbar as if it were a traditional window decor action bar. The toolbar's menu will be populated with the Activity's options menu and the navigation button will be wired through the standard {@link android.R.idhome home} menu select action.&lt;p&gt; &lt;p&gt;In order to use a Toolbar within the Activity's window content the application must not request the window feature {@link android.view.WindowFEATURE_ACTION_BAR FEATURE_SUPPORT_ACTION_BAR}.&lt;p&gt; @param toolbar Toolbar to set as the Activity's action bar, or {@code null} to cl" />
      <item value="Set a {@link android.widget.Toolbar Toolbar} to act as the {@link androidx.appcompat.app.ActionBar} for this Activity window. &lt;p&gt;When set to a non-null value the {@link getActionBar()} method will return an {@link androidx.appcompat.app.ActionBar} object that can be used to control the given toolbar as if it were a traditional window decor action bar. The toolbar's menu will be populated with the Activity's options menu and the navigation button will be wired through the standard {@link android.R.idhome home} menu select action.&lt;p&gt; &lt;p&gt;In order to use a Toolbar within the Activity's window content the application must not request the window feature {@link android.view.WindowFEATURE_ACTION_BAR FEATURE_SUPPORT_ACTION_BAR}.&lt;p&gt; @param toolbar Toolbar to set as the Activity's action bar, or {@code null} to clear it" />
      <item value="NOTE: Do not place your application dependencies here; they belong in the individual module build.gradle files" />
      <item value="implementation" />
      <item value="Top-level build file where you can add configuration options common to all sub-projectsmodules." />
      <item value="dependencies" />
      <item value="Enables namespacing of each library's R class so that its R class includes only the resources declared in the library itself and none from the library's dependencies, thereby reducing the size of the R class for that library" />
      <item value="This allows NavigationUI to decide what label to show in the action bar By using appBarConfig, it will also determine whether to show the up arrow or drawer menu icon" />
      <item value="You should also remove the old appBarConfiguration setup above" />
      <item value="In split screen mode, you can drag this view out from the left This does NOT modify the actionbar" />
      <item value="Use NavigationUI to set up Bottom Nav" />
      <item value="&lt;!-- The category applied to all items within this group." />
      <item value="&lt;!-- The category applied to all items within this group. (This will be or'ed with the orderInCategory attribute.) --&gt;" />
      <item value="handler Queue" />
      <item value="moon Offset" />
      <item value="Set of Material typography styles to start with" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="638" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="638" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1647845763924" />
  </component>
</application>