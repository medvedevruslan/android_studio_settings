<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="682" />
    <option name="newTranslationDialogWidth" value="1989" />
    <option name="newTranslationDialogX" value="5073" />
    <option name="newTranslationDialogY" value="1243" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="on Response Upload Measure Data" />
      <item value="on Response Device Info" />
      <item value="old Com" />
      <item value="all Received Command" />
      <item value="User-defined message code so that the recipient can identify what this message is about. Each Handler has its own name-space for message codes, so you do not need to worry about yours conflicting with other handlers." />
      <item value="reply Mac Address Or Time" />
      <item value="receive Error" />
      <item value="substring" />
      <item value="Returns the element at the specified position in this list. Params: index – index of the element to return Returns: the element at the specified position in this list Throws: IndexOutOfBoundsException – if the index is out of range (index &lt; 0 || index &gt;= size())" />
      <item value="成功寫出" />
      <item value="Write characteristic without requiring a response by the remote device" />
      <item value="WRITE_TYPE_NO_RESPONSE or" />
      <item value="Set the write type for this characteristic Setting the write type of a characteristic determines how the BluetoothGatt.writeCharacteristic function write this characteristic. Params: writeType – The write type to for this characteristic. Can be one of: WRITE_TYPE_DEFAULT, WRITE_TYPE_NO_RESPONSE or WRITE_TYPE_SIGNED." />
      <item value="access modifiers changed from: protected" />
      <item value="split Task" />
      <item value="parse Task Between Measure And Send Request" />
      <item value="parse Task Beyond Measure And Send Request" />
      <item value="UPLOAD MEASURE DATA" />
      <item value="SEND REQUEST" />
      <item value="ambient Temperature" />
      <item value="the number of values buffered in addition to replay." />
      <item value="Drop the oldest value in the buffer on overflow, add the new value to the buffer, do not suspend." />
      <item value="Suspend on buffer overflow." />
      <item value="Creates a flow that produces values from the specified vararg-arguments." />
      <item value="Implementation note: this is just an &quot;optimized&quot; overload of flowOf(vararg) which significantly reduces the footprint of widespread single-value flows." />
      <item value="Creates a flow that produces the given value." />
      <item value="allocated" />
      <item value="private val dataBase: DataBase = DataBase, private val refreshIntervalMs: Long = 1000" />
      <item value="source" />
      <item value="Network Bound Repository" />
      <item value="remote Posts" />
      <item value="The terminal operator that returns the first element emitted by the flow and then cancels flow's collection. Throws NoSuchElementException if the flow was empty" />
      <item value="fold" />
      <item value="predicate" />
      <item value="The terminal operator that returns the first element emitted by the flow and then cancels flow's collection. Throws NoSuchElementException if the flow was empty." />
      <item value="Emit Database content first" />
      <item value="save Remote Data" />
      <item value="@MainThread public void onBackPressed() Trigger a call to the currently added callbacks in reverse order in which they were added. Only if the most recently added callback is not enabled will any previously added callback be called. If hasEnabledCallbacks() is false when this method is called, the fallback Runnable set by the constructor will be triggered. androidx.activity.OnBackPressedDispatcher Gradle: androidx.activity:activity:1.5.1@aar (classes.jar)" />
      <item value="Create an ActivityOptions to transition between Activities using cross-Activity scene animations. This method carries the position of one shared element to the started Activity. The position of sharedElement will be used as the epicenter for the exit Transition. The position of the shared element in the launched Activity will be the epicenter of its entering Transition." />
      <item value="Observe network changes i.e. Internet Connectivity" />
      <item value="Notify the widget that refresh state has changed. Do not call this when refresh is triggered by a swipe gesture. @param refreshing Whether or not the view should show refresh progress." />
      <item value="bind" />
      <item value="along" />
      <item value="Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. When the exit Transition completes, finish() is called. If no entry Transition was used, finish() is called immediately and the Activity exit Transition is run. On Android 4.4 or lower, this method only finishes the Activity with no special exit transition." />
      <item value="Set whether home should be displayed as an &quot;up&quot; affordance. Set this to true if selecting &quot;home&quot; returns up by a single level in your UI rather than back to the top level or front page. To set several display options at once, see the setDisplayOptions methods. Params: showHomeAsUp – true to show the user that selecting home will return one level up rather than to the top level of the app. See Also: setDisplayOptions(int), setDisplayOptions(int, int)" />
      <item value="error: There is a problem with the query: [SQLITE_ERROR] SQL error or missing database (no such table: foodium_posts) public abstract void deleteAllPosts();" />
      <item value="This view is not constrained. It only has designtime positions, so it will jump to (0,0) at runtime unless you add the constraints" />
      <item value="instantiated:" />
      <item value="The surrounding layout (@layoutactivity_post_details) did not actually include this layout. Remove tools:showIn=... from the root tag. Tip: Try to refresh the layout." />
      <item value="Horizontal bias" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1" />
        <entry key="ENGLISH" value="1905" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1905" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="SUNDANESE" value="1" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1669623435467" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1684731850996" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="RUSSIAN" />
    <option name="targetLanguageSelection" value="LAST" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogHeight" value="381" />
    <option name="newTranslationDialogWidth" value="758" />
    <option name="newTranslationDialogX" value="1746" />
    <option name="newTranslationDialogY" value="998" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="corruptionHandler - The corruptionHandler is invoked if DataStore encounters a androidx" />
      <item value="Params: name - The name of the preferences. The preferences will be stored in a file in the &quot;datastore&quot; subdirectory in the application context's files directory and is generated using preferencesDataStoreFile. corruptionHandler - The corruptionHandler is invoked if DataStore encounters a androidx.datastore.core.CorruptionException when attempting to read data. CorruptionExceptions are thrown by serializers when data can not be de-serialized. produceMigrations - produce the migrations. The ApplicationContext is passed in to these callbacks as a parameter. DataMigrations are run before any access to data can occur. Each producer and migration may be run more than once whether or not it already succeeded (potentially because another migration failed or a write to disk failed.) scope - The scope in which IO operations and transform functions will execute. Returns: a property delegate that manages a datastore as a singleton." />
      <item value="User Storage" />
      <item value="Creates a property delegate for a single process DataStore. This should only be called once in a file (at the top level), and all usages of the DataStore should use a reference the same Instance. The receiver type for the property delegate must be an instance of Context. This should only be used from a single application in a single classloader in a single process. Example usage:" />
      <item value="common Code" />
      <item value="Consider using apply() instead; commit writes its data to persistent storage immediately, whereas apply will handle it in the background" />
      <item value="what should I do with result inside?" />
      <item value="Confirmation Dialog Fragment" />
      <item value="On Confirmation Dialog Result Handler" />
      <item value="confirmation Dialog Fragment" />
      <item value="Sets the given result for the requestKey. This result will be delivered to a FragmentResultListener that is called given to setFragmentResultListener(String, LifecycleOwner, FragmentResultListener) with the same requestKey." />
      <item value="cancel State Handled" />
      <item value="Live data where all received statuses except for MeasurementCancelled are replaced by null" />
      <item value="receiver" />
      <item value="Applies transform function to each value of the given flow" />
      <item value="Cancel Checkup Confirmation Dialog Fragment" />
      <item value="Call this view's OnClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc. Returns: True there was an assigned OnClickListener that was called, false otherwise is returned." />
      <item value="Flag for handling MeasurementCancelled status" />
      <item value="set Last Firmware Answer Send Time" />
      <item value="handle Firmware Data Received" />
      <item value="send Prepare Page Firmware" />
      <item value="send Write Config Firmware" />
      <item value="handle Firmware Connection State Changed" />
      <item value="m Last Ping Command Send" />
      <item value="update Send Time With Delay" />
      <item value="unused 2" />
      <item value="check Device State And Repeat Command" />
      <item value="DEVICE WORK DELAY" />
      <item value="Returns the current time in milliseconds. Note that while the unit of time of the return value is a millisecond, the granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds. See the description of the class Date for a discussion of slight discrepancies that may arise between &quot;computer time&quot; and coordinated universal time (UTC). Returns: the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC." />
      <item value="return the handle to a system-level service by class. Currently available classes are" />
      <item value="eturn the handle to a system-level service by class. Currently available classes are" />
      <item value="is Setted Characteristic Notification" />
      <item value="is Set Characteristic Notification" />
      <item value="A GATT operation completed successfully" />
      <item value="Open a GATT Server The callback is used to deliver results to Caller, such as connection status as well as the results of any other GATT server operations. The method returns a BluetoothGattServer instance. You can use BluetoothGattServer to conduct GATT server operations. Params: context – App context callback – GATT server callback handler that will receive asynchronous callbacks. Returns: BluetoothGattServer instance" />
      <item value="Get a list of devices that match any of the given connection states. If none of the devices match any of the given states, an empty list will be returned. This is not specific to any application configuration but represents the connection state of the local Bluetooth adapter for this profile. This can be used by applications like status bar which would just like to know the state of the local adapter" />
      <item value="get Devices Matching Connection States" />
      <item value="get Connection State" />
      <item value="resolve Attribution Source" />
      <item value="job Send Command" />
      <item value="time For Strazh Timer" />
      <item value="Performs the given action on each element." />
      <item value="Performs the given action on each element and returns the collection itself afterwards" />
      <item value="This can be used by applications like status bar which would just like to know the state of Bluetooth. Params: profile – GATT or GATT_SERVER Returns: List of devices. The list will be empty on error" />
      <item value="Get connected devices for the specified profile. Return the set of devices which are in state BluetoothProfile.STATE_CONNECTED This is not specific to any application configuration but represents the connection state of Bluetooth for this profile. This can be used by applications like status bar which would just like to know the state of Bluetooth. Params: profile – GATT or GATT_SERVER Returns: List of devices. The list will be empty on error." />
      <item value="java.lang.RuntimeException: Unable to start service com.example.clean_pre_trip_control.presentation.ui.ble.strazh.StrazhService@e3b4f19 with Intent { cmp=com.example.clean_pre_trip_control.presentation.ui.ble.strazh.StrazhService (has extras) }: java.lang.IllegalArgumentException: Profile not supported: 2" />
      <item value="Not supported - please use BluetoothManager.getConnectedDevices(int) with BluetoothProfile.GATT as argument Throws: UnsupportedOperationException" />
      <item value="time For Timer" />
      <item value="time To Timer()" />
      <item value="This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3" />
        <entry key="DUTCH" value="1" />
        <entry key="ENGLISH" value="742" />
        <entry key="RUSSIAN" value="742" />
        <entry key="YORUBA" value="1" />
      </map>
    </option>
  </component>
</application>