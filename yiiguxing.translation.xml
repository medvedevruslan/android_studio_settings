<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2047" />
    <option name="newTranslationDialogX" value="4494" />
    <option name="newTranslationDialogY" value="953" />
    <histories>
      <item value="Marks the API that is dependent on the experimental unsigned types, including those types themselves. Usages of such API will be reported as warnings unless an explicit opt-in with the [OptIn] annotation, e.g. `@OptIn(ExperimentalUnsignedTypes::class)`, or with the `-Xopt-in=kotlin.ExperimentalUnsignedTypes` compiler option is given. It's recommended to propagate the experimental status to the API that depends on unsigned types by annotating it with this annotation." />
      <item value="ViewModel for the task list screen." />
      <item value="A JUnit Test Rule that swaps the background executor used by the Architecture Components with a different one which executes each task synchronously." />
      <item value="A JUnit Test Rule that swaps the background executor used by the Architecture Components with a different one which executes each task synchronously. &lt;p&gt; You can use this rule for your host side tests that use Architecture Components." />
      <item value="JUnit Test Rule that swaps the background executor used by the Architecture Components with a different one which executes each task synchronously. &lt;p&gt; You can use this rule for your host side tests that use Architecture Components." />
      <item value="Then the new task event is triggered" />
      <item value="When adding a new task" />
      <item value="The annotated element would have &quot;private&quot; visibility" />
      <item value="otherwise" />
      <item value="Returns the content and prevents its use again." />
      <item value="get Or Await Value" />
      <item value="snack" />
      <item value="snac" />
      <item value="snackbar" />
      <item value="no Task Icon Drawable" />
      <item value="no Tasks Label String" />
      <item value="filtering Label String" />
      <item value="{@link LiveData} which publicly exposes {@link setValue(T)} and {@link postValue(T)} method. @param &lt;T&gt; The type of data hold by this instance" />
      <item value="Mutable" />
      <item value="Used as a wrapper for data that is exposed via a LiveData that represents an event." />
      <item value="that represents an event." />
      <item value="Used as a wrapper for data that is exposed via a LiveData that represents an event" />
      <item value="content" />
      <item value="Allow" />
      <item value="Allow external read but not write" />
      <item value="out" />
      <item value="Called by the Data Binding library and the FAB's click listener." />
      <item value="no Completed" />
      <item value="number Of Active Tasks" />
      <item value="Returns the number of elements matching the given" />
      <item value="predicate" />
      <item value="Returns the number of elements matching the given [predicate]." />
      <item value="returns Hundred Zero" />
      <item value="get Active And Completed Stats no Completed returns Hundred Zero" />
      <item value="unable to enhance gradle daemon classloader with idea_rt.jar" />
      <item value="whether or not this task is completed" />
      <item value="Classes that inherit from this interface can be represented as a sequence of elements that can be iterated over. @param T the type of element being iterated over. The iterator is covariant in its element type." />
      <item value="total" />
      <item value="Used to showcase unit tests." />
      <item value="showcase" />
      <item value="Function that does some trivial computation" />
      <item value="trivial" />
      <item value="computation" />
      <item value="trivial computatio" />
      <item value="Extension functions and Binding Adapters." />
      <item value="Transforms static java function Snackbar.make() to an extension function on View." />
      <item value="ransforms static java function Snackbar.make() to an extension function on View." />
      <item value="Function that does some trivial computation. Used to showcase unit tests" />
      <item value="Function that does some trivial computation. Used to showcase unit tests." />
      <item value="Transforms static java function Snackbar.make() to an extension function on View" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="498" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="498" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1643608149678" />
  </component>
</application>