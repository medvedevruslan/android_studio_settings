<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="1995" />
    <option name="newTranslationDialogX" value="5005" />
    <option name="newTranslationDialogY" value="1307" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Add the given LiveData as a source, similar to MediatorLiveData.addSource. Calling this method will remove any source that was yielded before via emitSource" />
      <item value="custom Sort Order" />
      <item value="Fetch" />
      <item value="position For Item" />
      <item value="Returns a LiveData mapped from the input this LiveData by applying transform to each value set on this." />
      <item value="mapped" />
      <item value="according" />
      <item value="Creates a Mutex instance. The mutex created is fair: lock is granted in first come, first served order. Params: locked - initial state of the mutex" />
      <item value="fair" />
      <item value="Creates a Mutex instance. The mutex created is fair: lock is granted in first come, first served order. Params: locked - initial state of the mutex." />
      <item value="Applies the given transform function to each element of the original collection and appends the results to the given destination." />
      <item value="Returns a list containing the results of applying the given transform function to each element in the original collection. Samples: samples.collections.Collections.Transformations.map Unresolved" />
      <item value="Get the current cached value, or await the completion of [block]." />
      <item value="Cache the first non-error result from an async computation passed as [block]. Usage: ``` val cachedSuccess: CacheOnSuccess&lt;Int&gt; = CacheOnSuccess(onErrorFallback = { 3 }) { delay(1_000) compute value using coroutines 5 } cachedSuccess.getOrAwait() get the result from the cache, calling [block], or fallback on exception ``` @param onErrorFallback: Invoke this if [block] throws exception other than cancellation, the result of this lambda will be returned for this call to [getOrAwait] but will not be cached for future calls to [getOrAwait] @param block Suspending lambda that produces the cached value. The first non-exceptional value returned by [block] will be cached, and future calls to [getOrAwait] will return the cached value or throw a [CancellationException]." />
      <item value="plants List Sort Order Cache" />
      <item value="Returns a Flow whose values are generated with transform function by combining the most recently emitted values by each flow. It can be demonstrated with the following example: val flow = flowOf(1, 2).onEach { delay(10) } val flow2 = flowOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;).onEach { delay(15) } flow.combine(flow2) { i, s -&gt; i.toString() + s }.collect { println(it) Will print &quot;1a 2a 2b 2c&quot; } This function is a shorthand for flow.combineTransform(flow2) { a, b -&gt; emit(transform(a, b)) }" />
      <item value="combine" />
      <item value="Create a flow that calls a single function" />
      <item value="sort Order" />
      <item value="Classes which inherit from this interface have a defined total ordering between their instances." />
      <item value="apply Sort" />
      <item value="Comparable Pair" />
      <item value="Returns the index of the first occurrence of the specified element in the list, or -1 if the specified element is not contained in the list." />
      <item value="Returns the index of the last occurrence of the specified element in the list, or -1 if the specified element is not contained in the list." />
      <item value="occurrence" />
      <item value="Returns first index of element, or -1 if the list does not contain element." />
      <item value="fetch Data" />
      <item value="Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function. The sort is stable. It means that equal elements preserve their order relative to each other after sorting. Samples: samples.collections.Collections.Sorting.sortedBy" />
      <item value="Compares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other." />
      <item value="invoke" />
      <item value="reply Upload Measure Data" />
      <item value="SEND REQUEST" />
      <item value="error: cannot inherit from final BleService public final class ThermometerService extends com.example.clean_pre_trip_control.presentation.ui.ble.BleService {" />
      <item value="cannot be instantiated" />
      <item value="instantiated" />
      <item value="signed In User Id" />
      <item value="Indicates the local Bluetooth adapter is turning off. Local clients should immediately attempt graceful disconnection of any remote links." />
      <item value="Regular" />
      <item value="ailure delivering result ResultInfo" />
      <item value="Attempt to invoke virtual method 'void androidx.lifecycle.MutableLiveData.setValue(java.lang.Object)' on a null object reference" />
      <item value="inject" />
      <item value="Instance creation error : could not create instance for [Factory:'com.example.clean_pre_trip_control.presentation.ui.ble.BleViewModel']: java.lang.NullPointerException: Attempt to invoke virtual method 'void androidx.lifecycle.MutableLiveData.setValue(java.lang.Object)' on a null object reference" />
      <item value="Posts a task to a main thread to set the given value. So if you have a following code executed in the main thread:" />
      <item value="Creates a MutableLiveData with no value assigned to it." />
      <item value="Unchecked cast: Result.Success&lt;Any&gt; to Status = Result&lt;MeasureResult, FailureBle&gt;" />
      <item value="@Synchronized annotation is not applicable to suspend functions and lambdas" />
      <item value="Cannot resolve type 'Result'" />
      <item value="resolve" />
      <item value="A list of plants that updates based on the current filter (flow version)" />
      <item value="[FlowCollector] is used as an intermediate or a terminal collector of the flow and represents an entity that accepts values emitted by the [Flow]." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="1614" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1615" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
        <entry key="SUNDANESE" value="1" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1662114583673" />
  </component>
</application>