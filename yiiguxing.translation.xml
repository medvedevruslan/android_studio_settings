<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="682" />
    <option name="newTranslationDialogWidth" value="1989" />
    <option name="newTranslationDialogX" value="5073" />
    <option name="newTranslationDialogY" value="1243" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="on Response Upload Measure Data" />
      <item value="on Response Device Info" />
      <item value="old Com" />
      <item value="all Received Command" />
      <item value="User-defined message code so that the recipient can identify what this message is about. Each Handler has its own name-space for message codes, so you do not need to worry about yours conflicting with other handlers." />
      <item value="reply Mac Address Or Time" />
      <item value="receive Error" />
      <item value="substring" />
      <item value="Returns the element at the specified position in this list. Params: index – index of the element to return Returns: the element at the specified position in this list Throws: IndexOutOfBoundsException – if the index is out of range (index &lt; 0 || index &gt;= size())" />
      <item value="成功寫出" />
      <item value="Write characteristic without requiring a response by the remote device" />
      <item value="WRITE_TYPE_NO_RESPONSE or" />
      <item value="Set the write type for this characteristic Setting the write type of a characteristic determines how the BluetoothGatt.writeCharacteristic function write this characteristic. Params: writeType – The write type to for this characteristic. Can be one of: WRITE_TYPE_DEFAULT, WRITE_TYPE_NO_RESPONSE or WRITE_TYPE_SIGNED." />
      <item value="access modifiers changed from: protected" />
      <item value="split Task" />
      <item value="parse Task Between Measure And Send Request" />
      <item value="parse Task Beyond Measure And Send Request" />
      <item value="UPLOAD MEASURE DATA" />
      <item value="SEND REQUEST" />
      <item value="ambient Temperature" />
      <item value="the number of values buffered in addition to replay." />
      <item value="Drop the oldest value in the buffer on overflow, add the new value to the buffer, do not suspend." />
      <item value="Suspend on buffer overflow." />
      <item value="Creates a flow that produces values from the specified vararg-arguments." />
      <item value="Implementation note: this is just an &quot;optimized&quot; overload of flowOf(vararg) which significantly reduces the footprint of widespread single-value flows." />
      <item value="Creates a flow that produces the given value." />
      <item value="allocated" />
      <item value="private val dataBase: DataBase = DataBase, private val refreshIntervalMs: Long = 1000" />
      <item value="source" />
      <item value="Network Bound Repository" />
      <item value="remote Posts" />
      <item value="The terminal operator that returns the first element emitted by the flow and then cancels flow's collection. Throws NoSuchElementException if the flow was empty" />
      <item value="fold" />
      <item value="predicate" />
      <item value="The terminal operator that returns the first element emitted by the flow and then cancels flow's collection. Throws NoSuchElementException if the flow was empty." />
      <item value="Emit Database content first" />
      <item value="save Remote Data" />
      <item value="@MainThread public void onBackPressed() Trigger a call to the currently added callbacks in reverse order in which they were added. Only if the most recently added callback is not enabled will any previously added callback be called. If hasEnabledCallbacks() is false when this method is called, the fallback Runnable set by the constructor will be triggered. androidx.activity.OnBackPressedDispatcher Gradle: androidx.activity:activity:1.5.1@aar (classes.jar)" />
      <item value="Create an ActivityOptions to transition between Activities using cross-Activity scene animations. This method carries the position of one shared element to the started Activity. The position of sharedElement will be used as the epicenter for the exit Transition. The position of the shared element in the launched Activity will be the epicenter of its entering Transition." />
      <item value="Observe network changes i.e. Internet Connectivity" />
      <item value="Notify the widget that refresh state has changed. Do not call this when refresh is triggered by a swipe gesture. @param refreshing Whether or not the view should show refresh progress." />
      <item value="bind" />
      <item value="along" />
      <item value="Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. When the exit Transition completes, finish() is called. If no entry Transition was used, finish() is called immediately and the Activity exit Transition is run. On Android 4.4 or lower, this method only finishes the Activity with no special exit transition." />
      <item value="Set whether home should be displayed as an &quot;up&quot; affordance. Set this to true if selecting &quot;home&quot; returns up by a single level in your UI rather than back to the top level or front page. To set several display options at once, see the setDisplayOptions methods. Params: showHomeAsUp – true to show the user that selecting home will return one level up rather than to the top level of the app. See Also: setDisplayOptions(int), setDisplayOptions(int, int)" />
      <item value="error: There is a problem with the query: [SQLITE_ERROR] SQL error or missing database (no such table: foodium_posts) public abstract void deleteAllPosts();" />
      <item value="This view is not constrained. It only has designtime positions, so it will jump to (0,0) at runtime unless you add the constraints" />
      <item value="instantiated:" />
      <item value="The surrounding layout (@layoutactivity_post_details) did not actually include this layout. Remove tools:showIn=... from the root tag. Tip: Try to refresh the layout." />
      <item value="Horizontal bias" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1" />
        <entry key="ENGLISH" value="1905" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1905" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="SUNDANESE" value="1" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1669623435467" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1686046133113" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="RUSSIAN" />
    <option name="targetLanguageSelection" value="LAST" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogHeight" value="381" />
    <option name="newTranslationDialogWidth" value="752" />
    <option name="newTranslationDialogX" value="1746" />
    <option name="newTranslationDialogY" value="998" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="Optional Modifier parameter should have a default value of Modifier" />
      <item value="fill Max Width" />
      <item value="Have the content fill (possibly only partially) the Constraints.maxWidth of the incoming measurement constraints, by setting the minimum width and the maximum width to be equal to the maximum width multiplied by fraction. Note that, by default, the fraction is 1, so the modifier will make the content fill the whole available width. If the incoming maximum width is Constraints.Infinity this modifier will have no effect. Params: fraction - The fraction of the maximum width to use, between 0 and 1, inclusive. Example usage: Samples: androidx.compose.foundation.layout.samples.SimpleFillWidthModifier Unresolved androidx.compose.foundation.layout.samples.FillHalfWidthModifier Unresolved" />
      <item value="Current user preference for the locale, corresponding to locale resource qualifier. By default, the default folder will be used" />
      <item value="Greeting" />
      <item value="Composable functions with non-default parameters are not supported in Preview unless they are annotated with" />
      <item value="A surface container using the 'background' color from the theme" />
      <item value="Creates a ScaffoldState with the default animation clock and memoizes it. Params: drawerState - the drawer state snackbarHostState - instance of SnackbarHostState to be used to show Snackbars inside of the Scaffold" />
      <item value="remember Scaffold State" />
      <item value="@HiltViewModel annotated class should contain exactly one @Inject annotated constructor." />
      <item value="If the package attribute is specified in the source AndroidManifest.xml, it can be migrated automatically to the namespace value in the build.gradle file using the AGP Upgrade Assistant; please refer to https:developer.android.comstudiobuildagp-upgrade-assistant for more information." />
      <item value="FAILURE: Build failed with an exception." />
      <item value="Namespace not specified. Please specify a namespace in the module's build.gradle file like so:" />
      <item value="String literal in setText can not be translated. Use Android resources instead." />
      <item value="Do not concatenate text displayed with setText. Use resource string with placeholders." />
      <item value="Affected Modules" />
      <item value="Affected Modules: app" />
      <item value="Surface" />
      <item value="Top-level build file where you can add configuration options common to all sub-projectsmodules." />
      <item value="jvm target compatibility should be set to the same Java version." />
      <item value=") jvm target compatibility should be set to the same Java version." />
      <item value="current target is 17" />
      <item value="&gt; 'compileJava' task (current target is 11) and 'compileKotlin' task (current target is 17) jvm target compatibility should be set to the same Java version." />
      <item value="alignment Line" />
      <item value="Configure component to receive clicks via input or accessibility &quot;click&quot; event. Add this modifier to the element to make it clickable within its bounds and show an indication as specified in indication parameter. If you need to support double click or long click alongside the single click, consider using combinedClickable. Params: interactionSource - MutableInteractionSource that will be used to dispatch PressInteraction.Press when this clickable is pressed. Only the initial (first) press will be recorded and dispatched with MutableInteractionSource. indication - indication to be shown when modified element is pressed. By default, indication from LocalIndication will be used. Pass null to show no indication, or current value from LocalIndication to show theme default enabled - Controls the enabled state. When false, onClick, and this modifier will appear disabled for accessibility services onClickLabel - semantic accessibility label for the onClick action role - the type of user interface element. Accessibility services might use this to describe the element or do customizations onClick - will be called when user clicks on the element Samples: androidx.compose.foundation.samples.ClickableSample" />
      <item value="The basic data structure of text with multiple styles. To construct an AnnotatedString you can use Builder." />
      <item value="width" />
      <item value="Unresolved" />
      <item value="The companion object Modifier is the empty, default, or starter Modifier that contains no elements. Use it to create a new Modifier using modifier extension factory functions: Samples: androidx.compose.ui.samples.ModifierUsageSample Unresolved androidx.compose.ui.samples.ModifierParameterSample Unresolved" />
      <item value="modifier" />
      <item value="modelClass - a Class whose instance is requested" />
      <item value="extras - an additional information for this creation request" />
      <item value="Duplicate class android.support.v4.app.INotificationSideChannel found in modules core-1.8.0-runtime (androidx.core:core:1.8.0) and support-compat-26.1.0-runtime (com.android.support:support-compat:26.1.0)" />
      <item value="Duplicate class android.support.v4.app.INotificationSideChannel found in modules core-1.10.1-runtime (androidx.core:core:1.10.1) and support-compat-26.1.0-runtime (com.android.support:support-compat:26.1.0)" />
      <item value="Creates a {@link ViewModelProvider}, which retains ViewModels while a scope of given Activity is alive. More detailed explanation is in {@link ViewModel}. &lt;p&gt; It uses {@link ViewModelProvider.AndroidViewModelFactory} to instantiate new ViewModels. @param activity an activity, in whose scope ViewModels should be retained @return a ViewModelProvider instance" />
      <item value="divider" />
      <item value="Set the RecyclerView.LayoutManager that this RecyclerView will use." />
      <item value="CoroutineScope tied to this LifecycleOwner's Lifecycle. This scope will be cancelled when the Lifecycle is destroyed. This scope is bound to Dispatchers.Main.immediate." />
      <item value="inflate" />
      <item value="A ViewHolder describes an item view and metadata about its place within the RecyclerView. RecyclerView.Adapter implementations should subclass ViewHolder and add fields for caching potentially expensive View.findViewById(int) results. While RecyclerView.LayoutParams belong to the RecyclerView.LayoutManager, ViewHolders belong to the adapter. Adapters should feel free to use their own custom ViewHolder implementations to store data that makes binding view contents easier. Implementations should assume that individual item views will hold strong references to ViewHolder objects and that RecyclerView instances may hold strong references to extra off-screen item views for caching purposes" />
      <item value="is Assignable From" />
      <item value="Represents the given receive channel as a hot flow and consumes the channel on the first collection from this flow. The resulting flow can be collected just once and throws IllegalStateException when trying to collect it more than once. See also receiveAsFlow which supports multiple collectors of the resulting flow. Cancellation semantics Flow collector is cancelled when the original channel is closed with an exception. Flow collector completes normally when the original channel is closed normally. If the flow collector fails with an exception, the source channel is cancelled. Operator fusion Adjacent applications of flowOn, buffer, conflate, and produceIn to the result of consumeAsFlow are fused. In particular, produceIn returns the original channel (but throws IllegalStateException on repeated calls). Calls to flowOn have generally no effect, unless buffer is used to explicitly request buffering." />
      <item value="consume As Flow" />
      <item value="localized" />
      <item value="Creates a localized description of this throwable. Subclasses may override this method in order to produce a locale-specific message. For subclasses that do not override this method, the default implementation returns the same result as getMessage(). Returns: The localized description of this throwable." />
      <item value="Idle" />
      <item value="Module with the Main dispatcher is missing. Add dependency providing the Main dispatcher, e.g. 'kotlinx-coroutines-android' and ensure it has the same version as 'kotlinx-coroutines-core'" />
      <item value="Only the original thread that created a view hierarchy can touch its views." />
      <item value="setSpan (0 ... 17) ends beyond length 11" />
      <item value="Returns a flow containing the results of applying the given transform function to each value of the original flow." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3" />
        <entry key="DUTCH" value="1" />
        <entry key="ENGLISH" value="796" />
        <entry key="RUSSIAN" value="796" />
        <entry key="YORUBA" value="1" />
      </map>
    </option>
  </component>
</application>