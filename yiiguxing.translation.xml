<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="1995" />
    <option name="newTranslationDialogX" value="5005" />
    <option name="newTranslationDialogY" value="1307" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="state In" />
      <item value="The starting of the sharing coroutine is controlled by the started parameter, as explained in the documentation for shareIn operator." />
      <item value="The stateIn operator is useful in situations when there is a cold flow that provides updates to the value of some state and is expensive to create andor to maintain, but there are multiple subscribers that need to collect the most recent state value. For example, consider a flow of state updates coming from a backend over the expensive network connection, taking a lot of time to establish. Conceptually it might be implemented like this:" />
      <item value="See the StateFlow documentation for the general concepts of state flows. The starting of the sharing coroutine is controlled by the started parameter, as explained in the documentation for shareIn operator." />
      <item value="sharing the most recently emitted value from a single running instance of the upstream flow with multiple downstream subscribers." />
      <item value="sharing the most recently" />
      <item value="Converts a cold Flow into a hot StateFlow that is started in the given coroutine scope, sharing the most recently emitted value from a single running instance of the upstream flow with multiple downstream subscribers. See the StateFlow documentation for the general concepts of state flows." />
      <item value="Returns a flow containing the results of applying the given [transform] function to each value of the original flow." />
      <item value="Returns a flow that wraps each element into [IndexedValue], containing value and its index (starting from zero)." />
      <item value="bind" />
      <item value="Immutable URI reference. A URI reference includes a URI and a fragment, the component of the URI following a ''. Builds and parses URI references which conform to RFC 2396 . In the interest of performance, this class performs little to no validation. Behavior is undefined for invalid input. This class is very forgiving--in the face of invalid input, it will return garbage rather than throw an exception unless otherwise specified." />
      <item value="include" />
      <item value="This can be useful for creating [Map] literals with less noise, for example:" />
      <item value="Creates a tuple of type [Pair] from this and [that]." />
      <item value="tuple" />
      <item value="Pair" />
      <item value="Represents a generic pair of two values." />
      <item value="Modal bottom sheet. This is a version of DialogFragment that shows a bottom sheet using BottomSheetDialog instead of a floating dialog" />
      <item value="Bottom Sheet Dialog Fragment" />
      <item value="Path" />
      <item value="Returns a flow that switches to a new flow produced by transform function every time the original flow emits a value. When the original flow emits a new value, the previous flow produced by transform block is cancelled." />
      <item value="Returns a flow that emits elements from the original flow transformed by transform function. When the original flow emits a new value, computation of the transform block for previous value is cancelled." />
      <item value="Returns a flow that switches to a new flow produced by transform function every time the original flow emits a value. When the original flow emits a new value, the previous flow produced by transform block is cancelled. For example, the following flow:" />
      <item value="eturns a flow that switches to a new flow produced by transform function every time the original flow emits a value. When the original flow emits a new value, the previous flow produced by transform block is cancelled. For example, the following flow: flow { emit(&quot;a&quot;) delay(100) emit(&quot;b&quot;) }.flatMapLatest { value -&gt; flow { emit(value) delay(200) emit(value + &quot;_last&quot;) } } produces a b b_last This operator is buffered by default and size of its output buffer can be changed by applying subsequent buffer operator." />
      <item value="Returns a flow that invokes the given [action] before each value of the upstream flow is emitted downstream." />
      <item value="Represents a 32-bit signed integer. On the JVM, non-nullable values of this type are represented as values of the primitive type int." />
      <item value="Returns the absolute value of the given value n. Special cases:" />
      <item value="check If It Less Null" />
      <item value="Returns a flow that switches to a new flow produced by transform function every time the original flow emits a value. When the original flow emits a new value, the previous flow produced by transform block is cancelled. For example, the following flow: flow { emit(&quot;a&quot;) delay(100) emit(&quot;b&quot;) }.flatMapLatest { value -&gt; flow { emit(value) delay(200) emit(value + &quot;_last&quot;) } } produces a b b_last This operator is buffered by default and size of its output buffer can be changed by applying subsequent buffer operator." />
      <item value="This operator is buffered by default and size of its output buffer can be changed by applying subsequent buffer operator." />
      <item value="flat Map Latest" />
      <item value="Build a DefinitionParameters" />
      <item value="Build a DefinitionParameters See Also: parameters" />
      <item value="reified" />
      <item value="repeatable" />
      <item value="Data Base" />
      <item value="Data Source" />
      <item value="Sing" />
      <item value="Sets a query string in the text field and optionally submits the query as well. Params: query – the query string. This replaces any query text already present in the text field. submit – whether to submit the query right now or only update the contents of text field." />
      <item value="set Query" />
      <item value="current" />
      <item value="Returns the query string currently in the text field. Returns: the query strin" />
      <item value="submit" />
      <item value="A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. Note: This class is included in the support library for compatibility with API level 7 and higher. If you're developing your app for API level 11 and higher only, you should instead use the framework android.widget.SearchView class. When the SearchView is used in an androidx.appcompat.app.ActionBar as an action view, it's collapsed by default, so you must provide an icon for the action. If you want the search field to always be visible, then call setIconifiedByDefault(false). Developer Guides" />
      <item value="A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. Note: This class is included in the support library for compatibility with API level 7 and higher. If you're developing your app for API level 11 and higher only, you should instead use the framework android.widget.SearchView class. When the SearchView is used in an androidx.appcompat.app.ActionBar as an action view, it's collapsed by default, so you must provide an icon for the action. If you want the search field to always be visible, then call" />
      <item value="CoroutineScope tied to this LifecycleOwner's Lifecycle. This scope will be cancelled when the Lifecycle is destroyed. This scope is bound to Dispatchers.Main.immediate." />
      <item value="Terminal flow operator that [launches][launch] the [collection][collect] of the given flow in the [scope]. It is a shorthand for `scope.launch { flow.collect() }`" />
      <item value="Terminal flow operator that [launches][launch] the [collection][collect] of the given flow in the [scope]. It is a shorthand for `scope.launch { flow.collect() }`." />
      <item value="Collects the value emitted by the upstream. This method is not thread-safe and should not be invoked concurrently" />
      <item value="Accepts the given collector and emits values into it." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="1506" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1506" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
        <entry key="SUNDANESE" value="1" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1661143807221" />
  </component>
</application>