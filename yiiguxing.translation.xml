<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="1997" />
    <option name="newTranslationDialogX" value="5005" />
    <option name="newTranslationDialogY" value="1307" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases." />
      <item value="Thermometer Measure Data" />
      <item value="hex String" />
      <item value="also" />
      <item value="is Success" />
      <item value="A GATT operation completed successfully" />
      <item value="connect Founded Device" />
      <item value="SEND REQUEST" />
      <item value="code Repeat Check" />
      <item value="Get a BluetoothDevice object for the given Bluetooth hardware address. Valid Bluetooth hardware addresses must be upper case, in a format such as &quot;00:11:22:33:AA:BB&quot;. The helper checkBluetoothAddress is available to validate a Bluetooth address. A BluetoothDevice will always be returned for a valid hardware address, even if this adapter has never seen that device. Params: address – valid Bluetooth MAC address Throws: IllegalArgumentException – if address is invalid" />
      <item value="Set the context for this BluetoothAdapter (only called from BluetoothManager)" />
      <item value="needed Device Found" />
      <item value="regular State" />
      <item value="register For Activity Result" />
      <item value="&lt;p&gt; If the host of this fragment is an {@link ActivityResultRegistryOwner} the {@link ActivityResultRegistry} of the host will be used. Otherwise, this will use the registry of the Fragment's Activity." />
      <item value="get Denied Permission" />
      <item value="pressure Measurement Fragment" />
      <item value="entries" />
      <item value="HANDOVER" />
      <item value="ACCEPT HANDOVER" />
      <item value="Unable to resume activity {com.example.clean_pre_trip_controlcom.example.clean_pre_trip_control.presentation.MainActivity}: java.lang.IllegalArgumentException: Unknown permission: [android.permission.ACCESS_COARSE_LOCATION]" />
      <item value="not attached to a context." />
      <item value="not attached to an activity." />
      <item value="check First Try After Should Show" />
      <item value="request Permission" />
      <item value="first Check All Permissions" />
      <item value="if should Show true" />
      <item value="By overriding invoke, we allow use cases to be called as &quot;invoking&quot;" />
      <item value="Worker" />
      <item value="daemon" />
      <item value="if should Show Request Permission Rationale_" />
      <item value="key – The name of the preference to retrieve. defValue – Value to return if this preference does not exist. Returns: Returns the preference value if it exists, or defValue. Throws ClassCastException if there is a preference with this name that is not a boolean" />
      <item value="should Show Rationale After" />
      <item value="Create a new Editor for these preferences, through which you can make modifications to the data in the preferences and atomically commit those changes back to the SharedPreferences object. Note that you must call SharedPreferences.Editor.commit to have any changes you perform in the Editor actually show up in the SharedPreferences. Returns: Returns a new instance of the SharedPreferences.Editor interface, allowing you to modify the values in this SharedPreferences object." />
      <item value="File creation mode: the default mode, where the created file can only be accessed by the calling application (or all applications sharing the same user ID)." />
      <item value="Create a new Editor for these preferences, through which you can make modifications to the data in the preferences and atomically commit those changes back to the SharedPreferences object. Note that you must call SharedPreferences.Editor.commit to have any changes you perform in the Editor actually show up in the SharedPreferences." />
      <item value="Unexpected error while executing: am start -n &quot;com.example.clean_pre_trip_controlcom.example.clean_pre_trip_control.presentation.ui.MainActivity&quot; -a android.intent.action.MAIN -c android.intent.category.LAUNCHER Error while Launching activity Failed to launch an application on all devices" />
      <item value="The default CoroutineDispatcher that is used by all standard builders like launch, async, etc if no dispatcher nor any other ContinuationInterceptor is specified in their context. It is backed by a shared pool of threads on JVM. By default, the maximal level of parallelism used by this dispatcher is equal to the number of CPU cores, but is at least two. Level of parallelism X guarantees that no more than X tasks can be executed in this dispatcher in paralle" />
      <item value="A coroutine dispatcher that is confined to the Main thread operating with UI objects. This dispatcher can be used either directly or via MainScope factory. Usually such dispatcher is single-threaded. Access to this property may throw IllegalStateException if no main thread dispatchers are present in the classpath. Depending on platform and classpath it can be mapped to different dispatchers: On JS and Native it is equivalent of Default dispatcher. On JVM it is either Android main thread dispatcher, JavaFx or Swing EDT dispatcher. It is chosen by ServiceLoader. In order to work with Main dispatcher, the following artifacts should be added to project runtime dependencies: kotlinx-coroutines-android for Android Main thread dispatcher kotlinx-coroutines-javafx for JavaFx Application thread dispatcher kotlinx-coroutines-swing for Swing EDT dispatcher In order to set a custom Main dispatcher for testing purposes, add the kotlinx-coroutines-test artifact to project test dependencies. Implementation note: MainCoroutineDispatcher.immediate is not supported on Native and JS platfo" />
      <item value="Scan using highest duty cycle. It's recommended to only use this mode when the application is running in the foreground." />
      <item value="Runs a new coroutine and blocks the current thread interruptibly until its completion. This function should not be used from a coroutine. It is designed to bridge regular blocking code to libraries that are written in suspending style, to be used in main functions and in tests. The default CoroutineDispatcher for this builder is an internal implementation of event loop that processes continuations in this blocked thread until the completion of this coroutine. See CoroutineDispatcher for the other implementations that are provided by kotlinx.coroutines. When CoroutineDispatcher is explicitly specified in the context, then the new coroutine runs in the context of the specified dispatcher while the current thread is blocked. If the specified dispatcher is an event loop of another runBlocking, then this invocation uses the outer event loop. If this blocked thread is interrupted (see Thread.interrupt), then the coroutine job is cancelled and this runBlocking invocation throws InterruptedException. See newCoroutineContext for a description of debugging facilities that are available for a newly created coroutine. Params: context - the context of the coroutine. The default value is an event loop on the current thread. block - the coroutine code." />
      <item value="try Connect Paired Device" />
      <item value="Stop the service, if it was previously started. This is the same as calling" />
      <item value="input Command" />
      <item value="Failure" />
      <item value="Failure Ble" />
      <item value="Failed" />
      <item value="Failed Ble" />
      <item value="work With Result Status" />
      <item value="worker With Result Status" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="1259" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1260" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1658129670714" />
  </component>
</application>