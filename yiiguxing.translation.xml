<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2047" />
    <option name="newTranslationDialogX" value="4494" />
    <option name="newTranslationDialogY" value="953" />
    <histories>
      <item value="Add an item for the settings fragment" />
      <item value="aused by: java.lang.IllegalArgumentException: navigation destination com.example.coursecurrencies:layoutactivity_main is not a direct child of this NavGraph" />
      <item value="primary" />
      <item value="Set a {@link android.widget.Toolbar Toolbar} to act as the {@link androidx.appcompat.app.ActionBar} for this Activity window. &lt;p&gt;When set to a non-null value the {@link getActionBar()} method will return an {@link androidx.appcompat.app.ActionBar} object that can be used to control the given toolbar as if it were a traditional window decor action bar. The toolbar's menu will be populated with the Activity's options menu and the navigation button will be wired through the standard {@link android.R.idhome home} menu select action.&lt;p&gt; &lt;p&gt;In order to use a Toolbar within the Activity's window content the application must not request the window feature {@link android.view.WindowFEATURE_ACTION_BAR FEATURE_SUPPORT_ACTION_BAR}.&lt;p&gt; @param toolbar Toolbar to set as the Activity's action bar, or {@code null} to cl" />
      <item value="Set a {@link android.widget.Toolbar Toolbar} to act as the {@link androidx.appcompat.app.ActionBar} for this Activity window. &lt;p&gt;When set to a non-null value the {@link getActionBar()} method will return an {@link androidx.appcompat.app.ActionBar} object that can be used to control the given toolbar as if it were a traditional window decor action bar. The toolbar's menu will be populated with the Activity's options menu and the navigation button will be wired through the standard {@link android.R.idhome home} menu select action.&lt;p&gt; &lt;p&gt;In order to use a Toolbar within the Activity's window content the application must not request the window feature {@link android.view.WindowFEATURE_ACTION_BAR FEATURE_SUPPORT_ACTION_BAR}.&lt;p&gt; @param toolbar Toolbar to set as the Activity's action bar, or {@code null} to clear it" />
      <item value="NOTE: Do not place your application dependencies here; they belong in the individual module build.gradle files" />
      <item value="implementation" />
      <item value="Top-level build file where you can add configuration options common to all sub-projectsmodules." />
      <item value="dependencies" />
      <item value="Enables namespacing of each library's R class so that its R class includes only the resources declared in the library itself and none from the library's dependencies, thereby reducing the size of the R class for that library" />
      <item value="This allows NavigationUI to decide what label to show in the action bar By using appBarConfig, it will also determine whether to show the up arrow or drawer menu icon" />
      <item value="You should also remove the old appBarConfiguration setup above" />
      <item value="In split screen mode, you can drag this view out from the left This does NOT modify the actionbar" />
      <item value="Use NavigationUI to set up Bottom Nav" />
      <item value="&lt;!-- The category applied to all items within this group." />
      <item value="&lt;!-- The category applied to all items within this group. (This will be or'ed with the orderInCategory attribute.) --&gt;" />
      <item value="handler Queue" />
      <item value="moon Offset" />
      <item value="Set of Material typography styles to start with" />
      <item value="Shapes" />
      <item value="This function should be used to help build responsive UIs that follow the system setting, to avoid harsh contrast changes when switching between applications. It is also recommended to provide user accessible overrides in your application, so users can choose to force an always-light or always-dark theme. To do this, you should provide the current theme value in a CompositionLocal or similar to components further down your hierarchy, only calling this effect once at the top level if no user override has been set. This also helps avoid multiple calls to this effect, which can be expensive as it queries system configuration. For example, to draw a white rectangle when in dark theme, and a black rectangle when in light theme:" />
      <item value="This function should be used to help build responsive UIs that follow the system setting, to avoid harsh contrast changes when switching between applications. It is also recommended to provide user accessible overrides in your application, so users can choose to force an always-light or always-dark theme. To do this, you should provide the current theme value in a CompositionLocal or similar to components further down your hierarchy, only calling this effect once at the top level if no user override has been set. This also helps avoid multiple calls to this effect, which can be expensive as it queries system configuration. For example, to draw a white rectangle when in dark theme, and a black rectangle when in light" />
      <item value="avoid" />
      <item value="avoid harsh" />
      <item value="harsh" />
      <item value="responsive" />
      <item value="execute" />
      <item value="Indicates that Lint should ignore the specified warnings for the annotated element." />
      <item value="If a binding adapter provides the setter, check that the adapter is annotated correctly and that the parameter type matches." />
      <item value="A Binding Adapter that is called whenever the value of the attribute `android:progressTint` changes. Depending on the value it determines the color of the progress bar." />
      <item value="Applies a tint to the progress indicator, if one exists, or to the entire progress drawable otherwise. Does not modify the current tint mode, which is {@link PorterDuff.ModeSRC_IN} by default. &lt;p&gt; The progress indicator should be specified as a layer with id {@link android.R.idprogress} in a {@link LayerDrawable} used as the progress drawable. &lt;p&gt; Subsequent calls to {@link setProgressDrawable(Drawable)} will automatically mutate the drawable and apply the specified tint and tint mode using {@link DrawablesetTintList(ColorStateList)}. @param tint the tint to apply, may be {@code null} to clear tint @attr ref android.R.styleableProgressBar_progressTint @see getProgressTintList() @see DrawablesetTintList(ColorStateList)" />
      <item value="get Associated Color" />
      <item value="hide" />
      <item value="hide If Zero" />
      <item value="Ensures that this value is not greater than the specified [maximumVa" />
      <item value="coerce At Most" />
      <item value="Ensures that this value is not greater than the specified [maximumValue]." />
      <item value="Sets the value of the progress bar so that 5 likes will fill it up." />
      <item value="Showcases Binding Adapters with multiple attributes. Note that this adapter is called whenever any of the attribute changes." />
      <item value="progress Scaled" />
      <item value="Solution" />
      <item value="Unused Binding Adapter to replace the Binding Converter that hides a view if the number of likes is zero." />
      <item value="Transformation methods for {@link LiveData}. &lt;p&gt; These methods permit functional composition and delegation of {@link LiveData} instances. The transformations are calculated lazily, and will run only when the returned {@link LiveData} is observed. Lifecycle behavior is propagated from the input {@code source} {@link LiveData} to the returned one." />
      <item value="This is to prevent external modification of the variable." />
      <item value="edit Comp" />
      <item value="Plain old activity with lots of problems to fix." />
      <item value="Bluetooth binder is null" />
      <item value="Pager Adapter Frag" />
      <item value="get Tasks request All Tasks From Remote Data Source" />
      <item value="grid" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="603" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="603" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1647253886548" />
  </component>
</application>