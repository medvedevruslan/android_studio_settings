<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="newTranslationDialogX" value="708" />
    <option name="newTranslationDialogY" value="973" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="set Write Type" />
      <item value="execute Write" />
      <item value="Weaker Access" />
      <item value="&quot;unused&quot;, &quot;WeakerAccess" />
      <item value="Creates new Write Characteristic request. The request will not be executed if given characteristic is null or does not have WRITE property. After the operation is complete a proper callback will be invoked." />
      <item value="Write Request" />
      <item value="on Write Message" />
      <item value="op Code" />
      <item value="true when LED was enabled, false when disabled." />
      <item value="on Invalid Data Received" />
      <item value="Offset at which the integer value can be found." />
      <item value="@param formatType The format type used to interpret the value." />
      <item value="Returns an integer value from the byte array. &lt;p&gt; &lt;p&gt;The formatType parameter determines how the value is to be interpreted. For example, setting formatType to {@link FORMAT_UINT16} specifies that the first two bytes of the value at the given offset are interpreted to generate the return value. @param formatType The format type used to interpret the value. @param offset Offset at which the integer value can be found. @return Cached value or null of offset exceeds value size." />
      <item value="on Data Sent" />
      <item value="on Data Received" />
      <item value="Received" />
      <item value="Sent" />
      <item value="param Read Write Job" />
      <item value="Read Write Job" />
      <item value="digit" />
      <item value="Converts this string to a new character array." />
      <item value="char Write List" />
      <item value="access modifiers changed from: protected" />
      <item value="set Characteristic Notification" />
      <item value="Initiates a reliable write transaction for a given remote device. &lt;p&gt;Once a reliable write transaction has been initiated, all calls to {@link writeCharacteristic} are sent to the remote device for verification and queued up for atomic execution. The application will receive an {@link BluetoothGattCallbackonCharacteristicWrite} callback in response to every {@link writeCharacteristic} call and is responsible for verifying if the value has been transmitted accurately. &lt;p&gt;After all characteristics have been queued up and verified, {@link executeReliableWrite} will execute all writes. If a characteristic was not written correctly, calling {@link abortReliableWrite} will cancel the current transaction without committing any values on the remote device." />
      <item value="Blinky Led Data Callback" />
      <item value="enqueue" />
      <item value="turn Led" />
      <item value="Writes the given data to the characteristic. The write type is taken from the characteristic. &lt;p&gt; Use {@link WriteRequestsplit() split()} or {@link WriteRequestsplit(DataSplitter) split(DataSplitter)} on the returned {@link WriteRequest} if data should be automatically split into multiple packets. If the characteristic is null, the {@link Requestfail(FailCallback) fail(FailCallback)} callback will be called. &lt;p&gt; The returned request must be either enqueued using {@link Requestenqueue()} for asynchronous use, or awaited using await() in synchronous execution. @param characteristic the characteristic to write to. @param data data to be written to the characteristic. @return The request." />
      <item value="If the data received are valid (single byte equal to 0x00 or 0x01), the {@link BlinkyButtonDataCallbackonButtonStateChanged} will be called. Otherwise, the {@link BlinkyButtonDataCallbackonInvalidDataReceived(BluetoothDevice, Data)} will be called with the data received." />
      <item value="Surface" />
      <item value="ACTION DATA AVAILABLE" />
      <item value="GATT SUCCESS" />
      <item value="make Gatt Update Intent Filter" />
      <item value="gatt Update Receiver" />
      <item value="offset" />
      <item value="unsigned Bytes To Int" />
      <item value="Characteristic supports notification" />
      <item value="notification" />
      <item value="Characteristic is broadcastable." />
      <item value="Characteristic property: Characteristic supports notification" />
      <item value="PROPERTY READ" />
      <item value="Appearance" />
      <item value="on Request Permissions Result" />
      <item value="Screen" />
      <item value="Splash" />
      <item value="Splash Screen Activity" />
      <item value="We don't want the splash screen to be interrupted" />
      <item value="DURATION" />
      <item value="extract Services" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="198" />
        <entry key="RUSSIAN" value="197" />
        <entry key="GALICIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1625475158643" />
  </component>
</application>