<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2003" />
    <option name="newTranslationDialogX" value="4625" />
    <option name="newTranslationDialogY" value="1337" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="On platforms Build.VERSION_CODES.O and above this value is ignored in favor of the importance value set on the notification's channel. On older platforms, this value is still used, so it is still required for apps supporting those platforms." />
      <item value="Set the relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The system sets a notification's priority based on various factors including the setPriority value. The effect may differ slightly on different platforms. On platforms Build.VERSION_CODES.O and above this value is ignored in favor of the importance value set on the notification's channel. On older platforms, this value is still used, so it is still required for apps supporting those platforms. Params: pri – Relative priority for this notification. Must be one of the priority constants defined by NotificationCompat. Acceptable values range from PRIORITY_MIN (-2) to PRIORITY_MAX (2). See Also: NotificationChannelCompat.Builder.setImportance(int)" />
      <item value="Notification Compat" />
      <item value="Low notification importance: Shows in the shade, and potentially in the status bar (see shouldHideSilentStatusBarIcons()), but is not audibly intrusive." />
      <item value="Default notification importance: shows everywhere, makes noise, but does not visually intrude" />
      <item value="Min notification importance: only shows in the shade, below the fold. This should not be used with Service.startForeground since a foreground service is supposed to be something the user cares about so it does not make semantic sense to mark its notification as minimum importance. If you do this as of Android version Build.VERSION_CODES.O, the system will show a higher-priority notification about your app running in the background." />
      <item value="A notification with no importance: does not show in the shade." />
      <item value="Default notification importance: shows everywhere, makes noise, but does not visually intrude." />
      <item value="Sets the notification light color for notifications posted to this channel, if lights are enabled on this channel and the device supports that feature. Only modifiable before the channel is submitted to NotificationManager.createNotificationChannel(NotificationChannel)." />
      <item value="Flag indicating that the created PendingIntent should be immutable. This means that the additional intent argument passed to the send methods to fill in unpopulated properties of this intent will be ignored. FLAG_IMMUTABLE only limits the ability to alter the semantics of the intent that is sent by send by the invoker of send. The creator of the PendingIntent can always update the PendingIntent itself via FLAG_UPDATE_CURRENT." />
      <item value="init" />
      <item value="java.lang.IllegalArgumentException: com.example.twodialogfragments: Targeting S+ (version 31 and above) requires that one of FLAG_IMMUTABLE or FLAG_MUTABLE be specified when creating a PendingIntent." />
      <item value="Switch" />
      <item value="Releases resources associated with this MediaPlayer object. It is considered good practice to call this method when you're done using the MediaPlayer. In particular, whenever an Activity of an application is paused (its onPause() method is called), or stopped (its onStop() method is called), this method should be invoked to release the MediaPlayer object, unless the application has a special need to keep the object around. In addition to unnecessary resources (such as memory and instances of codecs) being held, failure to call this method immediately if a MediaPlayer object is no longer needed may also lead to continuous battery consumption for mobile devices, and playback failure for other applications if no multiple instances of the same codec are supported on a device. Even if multiple instances of the same codec are supported, some performance degradation may be expected when unnecessary multiple instances are used at the same time." />
      <item value="Define" />
      <item value="Returns a new string obtained by replacing all occurrences of the oldValue substring in this string with the specified newValue string." />
      <item value="Returns first element. Throws: NoSuchElementException - if the list is empty." />
      <item value="randomize Songs" />
      <item value="shuffle Songs" />
      <item value="Displays a video file. The VideoView class can load images from various sources (such as resources or content providers), takes care of computing its measurement from the video so that it can be used in any layout manager, and provides various display options such as scaling and tinting. Note: VideoView does not retain its full state when going into the background. In particular, it does not restore the current play state, play position, selected tracks, or any subtitle tracks added via addSubtitleSource(). Applications should save and restore these on their own in" />
      <item value="shuffled" />
      <item value="Interface for receiving a callback when the process hosting an IBinder has gone away. See Also: linkToDeath" />
      <item value="Death Recipient" />
      <item value="RECEIVE BOOT COMPLETED" />
      <item value="count elapsed time" />
      <item value="elapsed Time" />
      <item value="update Grid Visibility" />
      <item value="Sets the sound that should be played for notifications posted to this channel and its audio attributes. Notification channels with an importance of at least NotificationManager.IMPORTANCE_DEFAULT should have a sound. Only modifiable before the channel is submitted to NotificationManager.createNotificationChannel(NotificationChannel)." />
      <item value="Inherit" />
      <item value="exported" />
      <item value="receiver" />
      <item value="Return true if Bluetooth LE(Always BLE On feature) is currently enabled and ready for use This returns true if current state is either STATE_ON or STATE_BLE_ON Returns: true if the local Bluetooth LE adapter is turned on" />
      <item value="Return true if Bluetooth is currently enabled and ready for use. Equivalent to: getBluetoothState() == STATE_ON Returns: true if the local adapter is turned on" />
      <item value="BIND AUTO CREATE" />
      <item value="destination" />
      <item value="Instantiatable" />
      <item value="If set to true, this service with be automatically stopped when the user remove a task rooted in an activity owned by the application. The default is false." />
      <item value="least Sig Bits" />
      <item value="most Sig Bits" />
      <item value="TODO: Consider calling ActivityCompatrequestPermissions here to request the missing permissions, and then overriding public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) to handle the case where the user grants the permission. See the documentation for ActivityCompatrequestPermissions for more details. return" />
      <item value="show" />
      <item value="launch Service" />
      <item value="Model State Ordinal" />
      <item value="Compaints" />
      <item value="hide" />
      <item value="has not been attached yet." />
      <item value="Get the root view for the fragment's layout (the one returned by onCreateView). Throws: IllegalStateException – if no view was returned by onCreateView. See Also: getView()" />
      <item value="Supply the construction arguments for this fragment. The arguments supplied here will be retained across fragment destroy and creation. This method cannot be called if the fragment is added to a FragmentManager and if isStateSaved() would return true." />
      <item value="Base interface that can be used for implementing property delegates of read-write properties. This is provided only for convenience; you don't have to extend this interface as long as your property delegate has methods with the same signatures." />
      <item value="Base interface that can be used for implementing property delegates of read-write properties. This is provided only for convenience; you don't have to extend this interface as long as your property delegate has methods with the same signatures. @param T the type of object which owns the delegated property. @param V the type of the property value." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="1099" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1099" />
        <entry key="FILIPINO" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="GREEK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1655212221663" />
  </component>
</application>