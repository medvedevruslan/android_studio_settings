<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2047" />
    <option name="newTranslationDialogX" value="4494" />
    <option name="newTranslationDialogY" value="953" />
    <histories>
      <item value="Extension functions and Binding Adapters." />
      <item value="Transforms static java function Snackbar.make() to an extension function on View." />
      <item value="ransforms static java function Snackbar.make() to an extension function on View." />
      <item value="Function that does some trivial computation. Used to showcase unit tests" />
      <item value="Function that does some trivial computation. Used to showcase unit tests." />
      <item value="trivial" />
      <item value="Transforms static java function Snackbar.make() to an extension function on View" />
      <item value="Extension functions and Binding Adapters" />
      <item value="snackbar" />
      <item value="Triggers a snackbar message when the value contained by snackbarTaskMessageLiveEvent is modified." />
      <item value="Sets the {@link LifecycleOwner} that should be used for observing changes of LiveData in this binding. If a {@link LiveData} is in one of the binding expressions and no LifecycleOwner is set, the LiveData will not be observed and updates to it will not be propagated to the UI. When using Data Binding with Fragments, make sure to use Fragment.getViewLifecycleOwner(). Using the Fragment as the LifecycleOwner might cause memory leaks since the Fragment's Lifecycle outlives the view Lifecycle. When using Data Binding with Activities, you can use the Activity as the LifecycleOwner. @param lifecycleOwner The LifecycleOwner that should be used for observing changes of LiveData in this binding." />
      <item value="Main UI for the statistics screen." />
      <item value="isCompleted whether or not this task is completed" />
      <item value="whether" />
      <item value="Immutable model class for a Task. In order to compile with Room, we can't use @JvmOverloads to generate multiple constructors" />
      <item value="multiple" />
      <item value="to compile" />
      <item value="whether or not this task is completed" />
      <item value="description of the task" />
      <item value="title of the task" />
      <item value="Immutable" />
      <item value="source" />
      <item value="refresh" />
      <item value="fresh" />
      <item value="refresh Tasks" />
      <item value="TASKS SERVICE DATA" />
      <item value="SERVICE LATENCY IN MILLIS" />
      <item value="Implementation of the data source that adds a latency simulating network" />
      <item value="data source" />
      <item value="Base class to be extended by all coroutine dispatcher implementations." />
      <item value="implementations" />
      <item value="extended" />
      <item value="Main entry point for accessing tasks data" />
      <item value="accessing" />
      <item value="entry point" />
      <item value="Concrete implementation to load tasks from the data sources into a cache." />
      <item value="cache" />
      <item value="data sources" />
      <item value="implementation" />
      <item value="Concrete" />
      <item value="A generic class that holds a value with its loading status." />
      <item value="Frag" />
      <item value="~ Unless required by applicable law or agreed to in writing, software ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS, ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ~ See the License for the specific language governing permissions and ~ limitations under the License." />
      <item value="Returns the currently selected page. If no page can sensibly be selected because there is no adapter or the adapter is empty, returns 0." />
      <item value="Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection." />
      <item value="Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key. Either key or value may be null." />
      <item value="@param value a Serializable object, or null" />
      <item value="Supply the construction arguments for this fragment. The arguments supplied here will be retained across fragment destroy and creation. &lt;p&gt;This method cannot be called if the fragment is added to a FragmentManager and if {@link isStateSaved()} would return true.&lt;p&gt;" />
      <item value="Return the arguments supplied when the fragment was instantiated." />
      <item value="assembly List" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="433" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="433" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1643004593799" />
  </component>
</application>