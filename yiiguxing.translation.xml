<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="newTranslationDialogX" value="708" />
    <option name="newTranslationDialogY" value="973" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="@param context Current context, will be used to access resources. @param orientation Layout orientation. Should be {@link HORIZONTAL} or {@link VERTICAL}. @param reverseLayout When set to true, layouts from end to start." />
      <item value="unit" />
      <item value="Tint" />
      <item value="ripple" />
      <item value="layout width" />
      <item value="Allow permanently disabling the Delete confirmation dialog Do not use animations if they are disabled systemwide Added some translation improvements" />
      <item value="Suspends current coroutine until all given jobs are complete. This method is semantically equivalent to joining all given jobs one by one with `jobs.forEach { it.join()" />
      <item value="Creates a coroutine and returns its future result as an implementation of [Deferred]. The running coroutine is cancelled when the resulting deferred is [cancelled][Job.cancel]. The resulting coroutine has a key difference compared with similar primitives in other languages and frameworks: it cancels the parent job (or outer scope) on failure to enforce structured concurrency paradigm. To change that behaviour, supervising parent ([SupervisorJob] or [supervisorScope]) can be used." />
      <item value="Runs a new coroutine and blocks the current thread _interruptibly_ until its completion. This function should not be used from a coroutine. It is designed to bridge regular blocking code to libraries that are written in suspending style, to be used in `main` functions and in tests." />
      <item value="Convenience method to launch a no-argument registered call without needing to pass in `null`." />
      <item value="projection" />
      <item value="to Typed Array" />
      <item value="permissions To Request" />
      <item value="Shared Storage Photo" />
      <item value="load Photos From Internal Storage Into Recycler View" />
      <item value="setup Internal Storage Recycler View" />
      <item value="Returns a list containing only elements matching the given [predicate]." />
      <item value="Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname." />
      <item value="Calls the specified suspending block with a given coroutine context, suspends until it completes, and returns the result. The resulting context for the [block] is derived by merging the current [coroutineContext] with the specified [context] using `coroutineContext + context` (see [CoroutineContext.plus]). This suspending function is cancellable. It immediately checks for cancellation of the resulting context and throws [CancellationException] if it is not [active][CoroutineContext.isActive]. This function uses dispatcher from the new context, shifting execution of the [block] into the different thread if a new dispatcher is specified, and back to the original dispatcher when it completes. Note that the result of `withContext` invocation is dispatched into the original context in a cancellable way with a prompt cancellation guarantee, which means that if the original [coroutineContext], in which `withContext` was invoked, is cancelled by the time its dispatcher starts to execute the code, it discards the result of `withContext` and throws [CancellationException]. The cancellation behaviour described above is enabled if and only if the dispatcher is being changed. For example, when using `withContext(NonCancellable) { ... }` there is no change in dispatcher and this call will not be cancelled neither on entry to the block inside `withContext` nor on exit from it." />
      <item value="Dispatchers" />
      <item value="with Context" />
      <item value="internal Storage Photo Adapter" />
      <item value="ask Confirm Delete" />
      <item value="exists" />
      <item value="Constraint Layout" />
      <item value="Environment" />
      <item value="Calls the specified function [block] with `this` value as its argument and returns `this` value. For detailed usage information see the documentation for [scope functions](https:kotlinlang.orgdocsreferencescope-functions.htmlalso)." />
      <item value="share" />
      <item value="Recently Non Null" />
      <item value="Recently Nullable" />
      <item value="Failed to find configured root that contains" />
      <item value="cache File Does Not Exist" />
      <item value="ASSET NAME" />
      <item value="java.lang.IllegalArgumentException: Couldn't find meta-data for provider with authority com.example.fileprovider_klimov" />
      <item value="Couldn't find meta-data for provider with authority com.example.fileprovider_klimov" />
      <item value="java.lang.RuntimeException: Unable to start activity ComponentInfo{com.example.fileprovider_klimovcom.example.fileprovider_klimov.MainActivity}: java.lang.ClassCastException: androidx.constraintlayout.widget.ConstraintLayout cannot be cast to android.widget.Button" />
      <item value="storage Dir" />
      <item value="assets" />
      <item value="inputStream = assets.open(ASSET_NAME)" />
      <item value="output Stream" />
      <item value="input Stream" />
      <item value="path" />
      <item value="notify Item Range Inserted" />
      <item value="Notify any registered observers that the currently reflected &lt;code&gt;itemCount&lt;code&gt; items starting at &lt;code&gt;positionStart&lt;code&gt; have been newly inserted. The items previously located at &lt;code&gt;positionStart&lt;code&gt; and beyond can now be found starting at position &lt;code&gt;positionStart + itemCount&lt;code&gt;. &lt;p&gt;This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.&lt;p&gt;" />
      <item value="root Directory Path" />
      <item value="epresents a generic pair of two values. There is no meaning attached to values in this class, it can be used for any purpose. Pair exhibits value semantics, i.e. two pairs are equal if both components are equal." />
      <item value="The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java." />
      <item value="Returns an empty read-only list. The returned list is serializable (JVM)." />
      <item value="Returns a new read-only list of given elements. The returned list is serializable (JVM)." />
      <item value="populate Database" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="264" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="264" />
        <entry key="GALICIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1637127515418" />
  </component>
</application>