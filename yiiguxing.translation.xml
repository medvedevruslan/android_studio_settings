<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="626" />
    <option name="newTranslationDialogWidth" value="2027" />
    <option name="newTranslationDialogX" value="720" />
    <option name="newTranslationDialogY" value="955" />
    <histories>
      <item value="By overriding invoke, we allow use cases to be called as &quot;invoking&quot;" />
      <item value="invoke" />
      <item value="region" />
      <item value="region Functions" />
      <item value="Get person from persistence and send it, synchronous" />
      <item value="If a list is already being displayed, a diff will be computed on a background thread, which will dispatch Adapter.notifyItem events on the main thread." />
      <item value="Submits a new list to be diffed, and displayed." />
      <item value="Submits a new list to be diffed, and displayed. &lt;p&gt; If a list is already being displayed, a diff will be computed on a background thread, which will dispatch Adapter.notifyItem events on the main thread. @param list The new list to be displayed." />
      <item value="child Count" />
      <item value="The total number of items in the dataset after the last load" />
      <item value="Add a listener that will be notified of any changes in scroll state or position. Components that add a listener should take care to remove it when finished. Other components that take ownership of a view may call clearOnScrollListeners() to remove all attached listeners" />
      <item value="add On Scroll Listener" />
      <item value="receive Channel" />
      <item value="handle Success" />
      <item value="fade Animation" />
      <item value="clear On Scroll Listeners" />
      <item value="Evaluates the pending bindings, updating any Views that have expressions bound to modified variables. This &lt;b&gt;must&lt;b&gt; be run on the UI thread." />
      <item value="Cannot resolve type 'recyclerViewModel'" />
      <item value="The Selection library calls {@link getItemDetails(MotionEvent)} when it needs access to information about the area andor {@link ItemDetails} under a {@link MotionEvent}. Your implementation must negotiate {@link RecyclerView.ViewHolder ViewHolder} lookup with the corresponding RecyclerView instance, and the subsequent conversion of the ViewHolder instance to an {@link ItemDetails} instance. &lt;p&gt; &lt;b&gt;Example&lt;b&gt; &lt;pre&gt; final class MyDetailsLookup extends ItemDetailsLookup&lt;Uri&gt; { private final RecyclerView mRecyclerView; MyDetailsLookup(RecyclerView recyclerView) { mRecyclerView = recyclerView; } public @Nullable ItemDetails&lt;Uri&gt; getItemDetails(@NonNull MotionEvent e) { View view = mRecyclerView.findChildViewUnder(e.getX(), e.getY()); if (view != null) { ViewHolder holder = mRecyclerView.getChildViewHolder(view); if (holder instanceof MyHolder) { return ((MyHolder) holder).getItemDetails(); } } return null;" />
      <item value="The Selection library calls {@link getItemDetails(MotionEvent)} when it needs access to information about the area andor {@link ItemDetails} under a {@link MotionEvent}. Your implementation must negotiate {@link RecyclerView.ViewHolder ViewHolder} lookup with the corresponding RecyclerView instance, and the subsequent conversion of the ViewHolder instance to an {@link ItemDetails} instance." />
      <item value="Item Details Lookup" />
      <item value="The Selection library calls {@link getItemDetails(MotionEvent)} when it needs access to information about the area andor {@link ItemDetails} under a {@link MotionEvent}. Your implementation must negotiate {@link RecyclerView.ViewHolder ViewHolder} lookup with the corresponding RecyclerView instance, and the subsequent conversion of the ViewHolder instance to an {@link ItemDetails} instance. &lt;p&gt; &lt;b&gt;Example&lt;b&gt; &lt;pre&gt; final class MyDetailsLookup extends ItemDetailsLookup&lt;Uri&gt; { private final RecyclerView mRecyclerView; MyDetailsLookup(RecyclerView recyclerView) { mRecyclerView = recyclerView; } public @Nullable ItemDetails&lt;Uri&gt; getItemDetails(@NonNull MotionEvent e) { View view = mRecyclerView.findChildViewUnder(e.getX(), e.getY()); if (view != null) { ViewHolder holder = mRecyclerView.getChildViewHolder(view); if (holder instanceof MyHolder) { return ((MyHolder) holder).getItemDetails(); } } return null; } }" />
      <item value="save Complaints" />
      <item value="Unable to make protected void" />
      <item value="Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected void java.util.ResourceBundle.setParent(java.util.ResourceBundle) accessible: module java.base does not &quot;opens java.util&quot; to unnamed module @3e07d849" />
      <item value="Template Fragment" />
      <item value="event Network Error" />
      <item value="_event Network Error" />
      <item value="hide" />
      <item value="Dev Byte Network" />
      <item value="Returns a list containing the results of applying the given [transform] function to each element in the original collection." />
      <item value="Returns a list containing the results of applying the given transform function to each element in the original collection" />
      <item value="instances" />
      <item value="permit functional composition" />
      <item value="permit" />
      <item value="Transformation methods for {@link LiveData}. &lt;p&gt; These methods permit functional composition and delegation of {@link LiveData} instances. The transformations are calculated lazily, and will run only when the returned {@link LiveData} is observed. Lifecycle behavior is propagated from the input {@code source} {@link LiveData} to the returned one." />
      <item value="suspend" />
      <item value="REPLACE" />
      <item value="OnConflict strategy constant to replace the old data and continue the transaction. An Insert DAO method that returns the inserted rows ids will never return -1 since this strategy will always insert a row even if there is a conflict" />
      <item value="as Domain Model" />
      <item value="as Database Model" />
      <item value="launch Uri" />
      <item value="Event triggered for network error. This is private to avoid exposing a way to set this value to observers." />
      <item value="A playlist of videos that can be shown on the screen. Views should use this to get access to the data." />
      <item value="Convert Network results to database objects" />
      <item value="Videos represent a devbyte that can be played." />
      <item value="Truncate long text with a preference for word boundaries and without trailing punctuation." />
      <item value="smart Truncate" />
      <item value="Short description is used for displaying truncated descriptions in the UI" />
      <item value="description" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="826" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="826" />
        <entry key="DUTCH" value="2" />
        <entry key="GALICIAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="GREEK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1649051998588" />
  </component>
</application>